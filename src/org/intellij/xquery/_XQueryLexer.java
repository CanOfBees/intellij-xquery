/* The following code was generated by JFlex 1.4.3 on 13/06/13 22:27 */

package org.intellij.xquery;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.xquery.psi.XQueryBasicTypes;
import org.intellij.xquery.psi.XQueryTypes;
import com.intellij.psi.TokenType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/06/13 22:27 from the specification file
 * <tt>/home/ligasgr/wrk/xquery-plugin/src/org/intellij/xquery/XQuery.flex</tt>
 */
class _XQueryLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int APOS_STRING = 12;
  public static final int END_TAG = 6;
  public static final int URIQUALIFIED = 14;
  public static final int EXPR_COMMENT = 2;
  public static final int ELEMENT_CONTENT = 8;
  public static final int DIR_COMMENT = 20;
  public static final int YYINITIAL = 0;
  public static final int QUOT_STRING = 10;
  public static final int START_TAG = 4;
  public static final int QNAME = 16;
  public static final int ALLOWING = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\42\1\42\2\0\1\42\22\0\1\42\1\57\1\5\1\34"+
    "\1\46\1\60\1\6\1\7\1\26\1\30\1\53\1\4\1\56\1\31"+
    "\1\1\1\51\12\2\1\27\1\25\1\44\1\47\1\45\1\52\1\50"+
    "\4\37\1\36\1\37\5\32\1\32\1\32\1\74\2\32\1\10\6\32"+
    "\1\32\2\32\1\54\1\43\1\55\1\43\1\32\1\43\1\16\1\35"+
    "\1\64\1\63\1\3\1\66\1\15\1\73\1\67\2\32\1\13\1\17"+
    "\1\62\1\23\1\20\1\21\1\65\1\24\1\14\1\22\1\70\1\72"+
    "\1\33\1\71\1\75\1\11\1\61\1\12\71\43\1\41\10\43\27\32"+
    "\1\43\37\32\1\43\u0208\32\160\41\16\32\1\43\u0d81\32\u0f00\32\14\43"+
    "\2\32\61\43\2\41\57\43\u0120\32\u0a70\43\u03f0\32\21\43\ua7ff\32\1\40"+
    "\u03ff\0\u047f\0\37777777600\40\2\0\11\0\1\42\1\42\2\0\1\42";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\4\1\5\2\1\1\4"+
    "\1\6\1\7\12\4\1\10\1\11\1\12\1\13\1\14"+
    "\1\4\1\15\1\4\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\1"+
    "\1\32\1\33\12\4\3\34\1\35\1\36\1\37\1\12"+
    "\1\40\1\41\1\22\1\1\1\42\1\43\1\6\1\1"+
    "\1\16\1\17\1\44\1\45\1\44\1\6\1\44\1\46"+
    "\1\1\1\47\1\50\1\47\2\51\1\52\1\53\1\0"+
    "\2\4\1\54\2\4\1\0\1\55\3\0\1\55\1\56"+
    "\1\57\1\60\1\61\2\4\1\62\1\63\2\4\1\64"+
    "\1\65\11\4\1\66\1\67\4\4\1\70\1\71\1\72"+
    "\1\73\1\4\1\74\2\4\1\75\1\0\1\76\1\0"+
    "\1\77\1\76\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\13\4\1\110\1\111\5\4\1\112\1\113"+
    "\1\114\1\43\1\115\5\0\1\116\1\117\3\0\1\1"+
    "\1\120\1\0\5\4\10\0\1\121\7\4\1\122\1\123"+
    "\17\4\1\76\1\0\15\4\1\124\10\4\1\125\1\4"+
    "\11\0\1\126\1\0\1\127\1\4\1\130\3\4\14\0"+
    "\2\4\1\131\16\4\1\132\5\4\1\76\1\0\3\4"+
    "\1\133\5\4\1\134\6\4\1\135\10\4\1\136\1\137"+
    "\1\0\1\140\5\0\1\141\1\0\3\4\1\142\4\0"+
    "\1\143\2\4\1\144\12\4\1\145\1\146\14\4\1\147"+
    "\14\4\1\150\1\4\6\0\1\151\1\4\1\0\6\4"+
    "\1\152\6\4\1\153\2\4\1\154\1\155\1\156\15\4"+
    "\1\157\1\4\1\160\6\4\2\0\1\161\2\0\10\4"+
    "\1\162\3\4\1\163\7\4\1\164\1\4\1\165\2\4"+
    "\1\166\4\4\1\167\1\170\2\4\2\0\1\171\1\4"+
    "\1\172\1\4\1\173\4\4\1\174\1\4\1\175\1\176"+
    "\11\4\1\177\1\200\1\201\1\202\1\4\2\0\2\4"+
    "\1\203\1\4\1\204\1\4\1\205\1\4\1\206\5\4"+
    "\1\207\2\4\1\0\1\4\2\0\1\210\1\4\1\211"+
    "\3\4\1\212\1\213\4\4\1\0\1\214\1\215\1\0"+
    "\3\4\1\216\4\4\1\0\6\4\1\217\1\0\6\4"+
    "\1\0\2\4\1\220\1\4\1\221\1\4\1\0\3\4"+
    "\1\222\1\0\3\4\1\0\1\4\1\223\1\224\1\0"+
    "\1\225\4\0\1\226\2\0\1\226\30\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[631];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u02aa"+
    "\0\u03a2\0\u03e0\0\u041e\0\u02aa\0\u02aa\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u02aa"+
    "\0\u06c8\0\u0706\0\u02aa\0\u02aa\0\u0744\0\u0782\0\u07c0\0\u07fe"+
    "\0\u083c\0\u087a\0\u02aa\0\u08b8\0\u02aa\0\u08f6\0\u02aa\0\u02aa"+
    "\0\u02aa\0\u02aa\0\u02aa\0\u0934\0\u02aa\0\u0972\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde"+
    "\0\u02aa\0\u0c1c\0\u0c5a\0\u0c98\0\u02aa\0\u02aa\0\u02aa\0\u0cd6"+
    "\0\u02aa\0\u02aa\0\u0d14\0\u02aa\0\u0d52\0\u0d90\0\u0dce\0\u0e0c"+
    "\0\u0e4a\0\u02aa\0\u02aa\0\u0e88\0\u0ec6\0\u0f04\0\u02aa\0\u0f42"+
    "\0\u02aa\0\u0f80\0\u0fbe\0\u02aa\0\u0ffc\0\u02aa\0\u103a\0\u1078"+
    "\0\u10b6\0\u10f4\0\u05d0\0\u1132\0\u1170\0\u03a2\0\u11ae\0\u11ec"+
    "\0\u03e0\0\u122a\0\u1268\0\u02aa\0\u12a6\0\u05d0\0\u05d0\0\u12e4"+
    "\0\u1322\0\u05d0\0\u05d0\0\u1360\0\u139e\0\u05d0\0\u13dc\0\u141a"+
    "\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a"+
    "\0\u1648\0\u05d0\0\u1686\0\u16c4\0\u1702\0\u1740\0\u02aa\0\u02aa"+
    "\0\u02aa\0\u02aa\0\u177e\0\u02aa\0\u17bc\0\u17fa\0\u05d0\0\u1838"+
    "\0\u1876\0\u18b4\0\u02aa\0\u02aa\0\u02aa\0\u02aa\0\u02aa\0\u02aa"+
    "\0\u02aa\0\u02aa\0\u02aa\0\u05d0\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u05d0\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u02aa\0\u02aa"+
    "\0\u02aa\0\u02aa\0\u02aa\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u02aa\0\u02aa\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u05d0\0\u22a2\0\u22e0"+
    "\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u05d0\0\u05d0\0\u2454"+
    "\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644"+
    "\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834"+
    "\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24"+
    "\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u05d0\0\u2b98\0\u2bd6"+
    "\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u05d0\0\u2d88"+
    "\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78"+
    "\0\u2fb6\0\u02aa\0\u2ff4\0\u02aa\0\u3032\0\u05d0\0\u3070\0\u30ae"+
    "\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e"+
    "\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u05d0"+
    "\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640"+
    "\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u05d0\0\u37f2"+
    "\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3928\0\u3966\0\u39a4"+
    "\0\u39e2\0\u05d0\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u05d0"+
    "\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u05d0\0\u3cca"+
    "\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u02aa"+
    "\0\u02aa\0\u3eba\0\u02aa\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0"+
    "\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u05d0\0\u4164\0\u41a2"+
    "\0\u41e0\0\u421e\0\u05d0\0\u425c\0\u429a\0\u42d8\0\u4316\0\u4354"+
    "\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a\0\u44c8\0\u4506\0\u4544"+
    "\0\u4582\0\u05d0\0\u45c0\0\u45fe\0\u463c\0\u467a\0\u46b8\0\u46f6"+
    "\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c\0\u486a\0\u05d0\0\u48a8"+
    "\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\u4a5a\0\u4a98"+
    "\0\u4ad6\0\u4b14\0\u4b52\0\u05d0\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a"+
    "\0\u4c88\0\u4cc6\0\u4d04\0\u02aa\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc"+
    "\0\u4e3a\0\u4e78\0\u4eb6\0\u4ef4\0\u05d0\0\u4f32\0\u4f70\0\u4fae"+
    "\0\u4fec\0\u502a\0\u5068\0\u05d0\0\u50a6\0\u50e4\0\u05d0\0\u05d0"+
    "\0\u05d0\0\u5122\0\u5160\0\u519e\0\u51dc\0\u521a\0\u5258\0\u5296"+
    "\0\u52d4\0\u5312\0\u5350\0\u538e\0\u53cc\0\u540a\0\u05d0\0\u5448"+
    "\0\u05d0\0\u5486\0\u54c4\0\u5502\0\u5540\0\u557e\0\u55bc\0\u55fa"+
    "\0\u5638\0\u05d0\0\u5676\0\u56b4\0\u56f2\0\u5730\0\u576e\0\u57ac"+
    "\0\u57ea\0\u5828\0\u5866\0\u58a4\0\u05d0\0\u58e2\0\u5920\0\u595e"+
    "\0\u05d0\0\u599c\0\u59da\0\u5a18\0\u5a56\0\u5a94\0\u5ad2\0\u5b10"+
    "\0\u05d0\0\u5b4e\0\u05d0\0\u5b8c\0\u5bca\0\u05d0\0\u5c08\0\u5c46"+
    "\0\u5c84\0\u5cc2\0\u05d0\0\u05d0\0\u5d00\0\u5d3e\0\u5d7c\0\u5dba"+
    "\0\u05d0\0\u5df8\0\u05d0\0\u5e36\0\u05d0\0\u5e74\0\u5eb2\0\u5ef0"+
    "\0\u5f2e\0\u05d0\0\u5f6c\0\u05d0\0\u05d0\0\u5faa\0\u5fe8\0\u6026"+
    "\0\u6064\0\u60a2\0\u60e0\0\u611e\0\u615c\0\u619a\0\u61d8\0\u05d0"+
    "\0\u05d0\0\u05d0\0\u6216\0\u6254\0\u6292\0\u62d0\0\u630e\0\u05d0"+
    "\0\u634c\0\u05d0\0\u638a\0\u05d0\0\u63c8\0\u05d0\0\u6406\0\u6444"+
    "\0\u6482\0\u64c0\0\u64fe\0\u05d0\0\u653c\0\u657a\0\u65b8\0\u65f6"+
    "\0\u6634\0\u6672\0\u05d0\0\u66b0\0\u05d0\0\u66ee\0\u672c\0\u676a"+
    "\0\u05d0\0\u05d0\0\u67a8\0\u67e6\0\u6824\0\u6862\0\u68a0\0\u05d0"+
    "\0\u02aa\0\u68de\0\u691c\0\u695a\0\u6998\0\u05d0\0\u69d6\0\u6a14"+
    "\0\u6a52\0\u6a90\0\u6ace\0\u6b0c\0\u6b4a\0\u6b88\0\u6bc6\0\u6c04"+
    "\0\u6c42\0\u05d0\0\u6c80\0\u6cbe\0\u6cfc\0\u6d3a\0\u6d78\0\u6db6"+
    "\0\u6df4\0\u6e32\0\u6e70\0\u6eae\0\u05d0\0\u6eec\0\u05d0\0\u6f2a"+
    "\0\u6f68\0\u6fa6\0\u6fe4\0\u7022\0\u05d0\0\u7060\0\u709e\0\u70dc"+
    "\0\u711a\0\u7158\0\u7196\0\u05d0\0\u05d0\0\u71d4\0\u05d0\0\u7212"+
    "\0\u7250\0\u728e\0\u72cc\0\u730a\0\u7348\0\u7386\0\u73c4\0\u7402"+
    "\0\u7440\0\u747e\0\u74bc\0\u74fa\0\u7538\0\u7576\0\u75b4\0\u75f2"+
    "\0\u7630\0\u766e\0\u76ac\0\u76ea\0\u7728\0\u7766\0\u77a4\0\u77e2"+
    "\0\u7820\0\u785e\0\u789c\0\u78da\0\u7918\0\u7956\0\u7994";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[631];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\14\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\34\1\45\1\46\1\47\3\34\1\14"+
    "\1\50\1\14\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\34"+
    "\1\76\1\34\1\77\1\100\1\14\25\101\1\102\1\103"+
    "\10\101\1\14\35\101\3\14\1\104\1\14\1\105\1\14"+
    "\1\106\1\104\2\14\12\104\2\14\1\107\2\14\2\104"+
    "\1\14\4\104\1\14\1\110\2\14\1\111\1\14\1\112"+
    "\1\14\1\113\10\14\14\104\3\14\1\104\4\14\1\104"+
    "\2\14\12\104\2\14\1\107\2\14\2\104\1\14\4\104"+
    "\1\14\1\110\2\14\1\114\14\14\14\104\11\115\1\116"+
    "\1\117\27\115\1\120\1\115\1\121\31\115\1\14\4\122"+
    "\1\123\1\124\2\122\1\125\1\126\25\122\1\14\35\122"+
    "\1\14\5\122\1\124\1\127\1\122\1\125\1\126\25\122"+
    "\1\14\35\122\10\14\1\130\31\14\1\50\33\14\3\131"+
    "\1\132\4\131\1\132\2\131\12\132\2\131\1\107\2\131"+
    "\2\132\1\131\4\132\1\131\1\50\17\131\14\132\3\131"+
    "\1\133\36\131\1\50\33\131\1\14\30\134\1\135\6\134"+
    "\1\14\35\134\77\0\1\136\1\137\74\0\1\137\1\16"+
    "\1\140\32\0\1\140\40\0\3\34\4\0\1\34\2\0"+
    "\1\141\3\34\1\142\1\34\1\143\3\34\4\0\3\34"+
    "\1\0\5\34\20\0\1\144\5\34\1\145\5\34\5\146"+
    "\1\147\1\150\67\146\6\151\1\152\1\153\66\151\1\0"+
    "\3\34\4\0\1\34\1\154\1\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\2\34\1\155\4\0"+
    "\1\34\2\0\1\34\1\156\10\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\10\34\1\157\1\34\4\0\3\34\1\0\5\34\20\0"+
    "\7\34\1\160\1\34\1\161\2\34\1\0\2\34\1\162"+
    "\4\0\1\34\2\0\1\34\1\163\10\34\4\0\3\34"+
    "\1\0\5\34\20\0\3\34\1\164\10\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\165\1\166\7\34\1\167\4\0"+
    "\3\34\1\0\5\34\20\0\1\170\13\34\1\0\3\34"+
    "\4\0\1\34\2\0\3\34\1\171\4\34\1\172\1\34"+
    "\4\0\3\34\1\0\5\34\20\0\5\34\1\173\6\34"+
    "\1\0\2\34\1\174\4\0\1\34\2\0\3\34\1\175"+
    "\6\34\4\0\3\34\1\0\5\34\20\0\3\34\1\176"+
    "\10\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\1\177\13\34\1\0\3\34\4\0\1\34\2\0\5\34"+
    "\1\200\4\34\4\0\3\34\1\0\5\34\20\0\3\34"+
    "\1\201\1\202\7\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\34\1\203\6\34\1\204\1\34\4\0\3\34\1\0"+
    "\5\34\20\0\2\34\1\205\5\34\1\206\3\34\27\0"+
    "\1\207\4\0\1\210\70\0\1\211\17\0\1\212\27\0"+
    "\3\34\4\0\1\34\2\0\6\34\1\213\3\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\30\0\1\214\46\0"+
    "\3\34\4\0\1\34\2\0\3\34\1\215\4\34\1\216"+
    "\1\34\4\0\3\34\1\0\5\34\20\0\7\34\1\217"+
    "\4\34\42\0\1\50\34\0\1\220\1\221\37\0\1\222"+
    "\1\0\1\223\1\0\1\224\1\225\73\0\1\226\1\0"+
    "\1\227\75\0\1\230\77\0\1\231\73\0\1\232\107\0"+
    "\1\233\15\0\2\34\1\234\4\0\1\34\2\0\3\34"+
    "\1\235\4\34\1\236\1\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\2\34\1\237\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\5\34\1\240"+
    "\6\34\1\0\3\34\4\0\1\34\2\0\3\34\1\241"+
    "\4\34\1\242\1\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\2\34\1\243\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\7\34\1\244\1\245\1\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\1\34\1\246\2\34\1\247\5\34\4\0"+
    "\3\34\1\0\5\34\20\0\1\250\3\34\1\251\7\34"+
    "\1\0\2\34\1\252\4\0\1\34\2\0\3\34\1\253"+
    "\6\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\11\34\1\254\2\34\1\0\3\34\4\0"+
    "\1\34\2\0\3\34\1\255\6\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\2\34\1\256\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\27\0\1\257\76\0\1\260\46\0\3\104\4\0\1\104"+
    "\2\0\12\104\4\0\3\104\1\0\5\104\20\0\14\104"+
    "\42\0\1\110\100\0\1\261\30\0\11\115\2\0\31\115"+
    "\1\0\31\115\11\0\1\262\76\0\1\262\63\0\11\115"+
    "\2\0\27\115\1\120\1\115\1\0\31\115\51\0\1\263"+
    "\5\0\1\264\31\0\1\265\1\0\1\265\1\266\2\0"+
    "\1\267\12\0\1\270\52\0\1\271\76\0\1\272\74\0"+
    "\1\273\65\0\3\132\4\0\1\132\2\0\12\132\2\0"+
    "\1\274\1\0\3\132\1\0\5\132\20\0\14\132\17\0"+
    "\1\275\107\0\1\276\46\0\1\137\1\140\32\0\1\140"+
    "\41\0\1\277\1\0\1\300\24\0\1\300\45\0\2\34"+
    "\1\301\4\0\1\34\2\0\11\34\1\302\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\5\34\1\303\4\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\2\34\1\304\11\34"+
    "\1\0\2\34\1\305\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\5\0\1\146\103\0"+
    "\1\306\1\0\1\306\1\307\2\0\1\310\12\0\1\311"+
    "\54\0\1\312\1\0\1\312\1\313\2\0\1\314\12\0"+
    "\1\315\50\0\1\151\67\0\3\34\4\0\1\34\2\0"+
    "\1\34\1\316\1\34\1\317\6\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\5\34\1\320\4\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\2\34\1\321\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\2\34"+
    "\1\322\4\0\1\34\2\0\10\34\1\323\1\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\1\324\11\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\2\34\1\325\11\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\1\34\1\326\12\34\1\0\3\34"+
    "\4\0\1\34\2\0\5\34\1\327\4\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\1\34"+
    "\1\330\12\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\1\331\13\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\3\34\1\332\10\34\1\0\3\34\4\0"+
    "\1\34\2\0\1\34\1\333\10\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\2\34\1\334\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\10\34\1\335\1\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\34\1\336\10\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\1\34"+
    "\1\337\12\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\3\34\1\340\10\34"+
    "\1\0\3\34\4\0\1\34\2\0\4\34\1\341\5\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\11\34\1\342\2\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\5\34"+
    "\1\343\6\34\1\0\3\34\4\0\1\34\2\0\7\34"+
    "\1\344\2\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\11\34\1\345\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\7\34\1\346\2\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\2\0\1\347\74\0\1\347\1\221"+
    "\1\350\32\0\1\350\40\0\1\220\1\221\37\0\1\222"+
    "\3\0\1\224\30\0\3\34\4\0\1\34\2\0\4\34"+
    "\1\351\5\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\1\352"+
    "\2\34\1\0\5\34\20\0\1\34\1\353\12\34\1\0"+
    "\3\34\4\0\1\34\2\0\11\34\1\354\4\0\3\34"+
    "\1\0\5\34\20\0\2\34\1\355\1\34\1\356\7\34"+
    "\1\0\3\34\4\0\1\34\2\0\2\34\1\357\7\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\11\34\1\360\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\361\4\34\1\362\4\34\4\0\3\34\1\0\5\34"+
    "\20\0\1\363\13\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\34\1\364\10\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\1\365\13\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\3\34\1\366\10\34\1\0\2\34\1\367\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\5\34\1\370"+
    "\4\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\11\34\1\371\4\0\3\34"+
    "\1\0\5\34\20\0\4\34\1\372\4\34\1\373\2\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\3\34\1\374\10\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\3\34\1\375\10\34\1\0\2\34\1\376\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\12\34\1\377\1\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\3\34\1\u0100\10\34\31\0\1\u0101\60\0"+
    "\1\u0102\100\0\1\u0103\1\u0104\77\0\1\u0105\55\0\1\u0106"+
    "\30\0\1\u0107\42\0\6\273\1\u0108\2\273\1\0\1\u0109"+
    "\63\273\3\0\1\u010a\4\0\1\u010a\2\0\12\u010a\5\0"+
    "\2\u010a\1\0\4\u010a\21\0\14\u010a\20\0\1\u010b\122\0"+
    "\1\u010c\32\0\1\277\74\0\3\34\4\0\1\34\2\0"+
    "\4\34\1\u010d\5\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\2\34\1\u010e\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\34\1\u010f\10\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\10\34\1\u0110\1\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\3\34\1\u0111\10\34"+
    "\14\0\1\u0112\100\0\1\u0113\1\u0114\77\0\1\u0115\55\0"+
    "\1\u0116\30\0\1\u0117\56\0\1\u0118\100\0\1\u0119\1\u011a"+
    "\77\0\1\u011b\55\0\1\u011c\30\0\1\u011d\43\0\3\34"+
    "\4\0\1\34\2\0\11\34\1\u011e\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\2\34\1\u011f\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\1\u0120\13\34\1\0\3\34\4\0"+
    "\1\34\2\0\3\34\1\u0121\6\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\7\34\1\u0122\2\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\10\34\1\u0123"+
    "\1\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\2\34\1\u0124\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\7\34\1\u0125\2\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\7\34"+
    "\1\u0126\2\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\1\u0127"+
    "\2\34\1\0\5\34\20\0\2\34\1\u0128\11\34\1\0"+
    "\3\34\4\0\1\34\2\0\1\34\1\u0129\10\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\11\34\1\u012a\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\3\34\1\u012b\10\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\5\34\1\u012c\6\34\1\0\2\34"+
    "\1\u012d\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\5\34\1\u012e"+
    "\6\34\1\0\2\34\1\u012f\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\2\34"+
    "\1\u0130\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\34\1\u0131\10\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\2\34\1\u0132\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\2\34"+
    "\1\u0133\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\1\u0134\13\34"+
    "\2\0\1\347\1\350\32\0\1\350\41\0\1\u0135\1\0"+
    "\1\u0136\24\0\1\u0136\45\0\2\34\1\u0137\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\5\34\1\u0138\4\34"+
    "\4\0\3\34\1\0\5\34\20\0\5\34\1\u0139\6\34"+
    "\1\0\2\34\1\u013a\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\2\34\1\u013b\11\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\u013c\11\34\4\0\3\34\1\0\5\34\20\0\5\34"+
    "\1\u013d\6\34\1\0\3\34\4\0\1\34\2\0\3\34"+
    "\1\u013e\6\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\5\34\1\u013f\6\34\1\0\2\34"+
    "\1\u0140\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\u0141\11\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\7\34\1\u0142\4\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\34\1\u0143\7\34\1\u0144\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\7\34\1\u0145\2\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\2\34\1\u0146"+
    "\11\34\1\0\3\34\4\0\1\34\2\0\4\34\1\u0147"+
    "\5\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\10\34\1\u0148\1\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\1\34\1\u0149\10\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\5\34\1\u014a"+
    "\6\34\1\0\2\34\1\u014b\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\11\34\1\u014c\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\5\34\1\u014d"+
    "\6\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\3\34\1\u014e\10\34\1\0"+
    "\3\34\4\0\1\34\2\0\10\34\1\u014f\1\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\31\0\1\u0150\71\0"+
    "\1\u0151\70\0\1\u0102\100\0\1\u0152\75\0\1\265\54\0"+
    "\1\u0106\22\0\1\u0153\52\0\2\u0154\12\0\1\u0154\16\0"+
    "\3\u0154\23\0\2\u0154\1\0\1\u0154\22\0\1\u0155\1\0"+
    "\1\u0155\1\u0156\2\0\1\u0157\12\0\1\u0158\44\0\1\u0159"+
    "\4\0\1\u0159\2\0\12\u0159\5\0\2\u0159\1\0\4\u0159"+
    "\21\0\14\u0159\14\0\1\u015a\62\0\2\34\1\u015b\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\7\34\1\u015c\4\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\1\34\1\u015d\12\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\7\34\1\u015e\4\34\25\0\1\146\70\0\1\u0112\100\0"+
    "\1\u015f\75\0\1\306\54\0\1\u0116\22\0\1\146\52\0"+
    "\2\u0160\12\0\1\u0160\16\0\3\u0160\23\0\2\u0160\1\0"+
    "\1\u0160\34\0\1\151\70\0\1\u0118\100\0\1\u0161\75\0"+
    "\1\312\54\0\1\u011c\22\0\1\151\52\0\2\u0162\12\0"+
    "\1\u0162\16\0\3\u0162\23\0\2\u0162\1\0\1\u0162\10\0"+
    "\3\34\4\0\1\34\2\0\1\34\1\u0163\10\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\11\34\1\u0164\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\1\34"+
    "\1\u0165\10\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\5\34\1\u0166\4\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\10\34\1\u0167\3\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\1\u0168"+
    "\13\34\1\0\3\34\4\0\1\34\2\0\1\u0169\11\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\11\34\1\u016a\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\4\34\1\u016b\5\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\2\34\1\u016c\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\2\34"+
    "\1\u016d\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\2\34\1\u016e\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\1\34\1\u016f\12\34\1\0\3\34"+
    "\4\0\1\34\2\0\10\34\1\u0170\1\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\3\34"+
    "\1\u0171\10\34\1\0\3\34\4\0\1\34\2\0\5\34"+
    "\1\u0172\4\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\4\34\1\u0173\5\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\2\34\1\u0174\11\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\3\34"+
    "\1\u0175\10\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\1\u0176\2\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\1\34\1\u0177\12\34\2\0\1\u0135\74\0"+
    "\3\34\4\0\1\34\2\0\11\34\1\u0178\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\3\34"+
    "\1\u0179\10\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\1\u017a\13\34\1\0"+
    "\2\34\1\u017b\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\3\34\1\u017c\6\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\4\34"+
    "\1\u017d\5\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\7\34\1\u017e\2\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\34\1\u017f\10\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\3\34\1\u0180\6\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\1\u0181\2\34\1\0\5\34\20\0\14\34\1\0"+
    "\2\34\1\u0182\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\1\34\1\u0183\10\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\3\34\1\u0184\10\34"+
    "\1\0\3\34\4\0\1\34\2\0\1\34\1\u0185\10\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\3\34\1\u0186\10\34\1\0\3\34\4\0\1\34"+
    "\2\0\3\34\1\u0187\6\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\1\u0188\13\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\3\34\1\u0189\10\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\5\34\1\u018a\6\34\1\0\3\34\4\0\1\34\2\0"+
    "\3\34\1\u018b\6\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\2\34\1\u018c\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\1\u018d\2\34\1\0"+
    "\5\34\20\0\14\34\24\0\1\u0102\53\0\2\u0154\12\0"+
    "\1\u0154\6\0\1\u0153\7\0\3\u0154\23\0\2\u0154\1\0"+
    "\1\u0154\23\0\1\u018e\100\0\1\u018f\1\u0190\77\0\1\u0191"+
    "\55\0\1\u0192\30\0\1\u0193\43\0\3\u0159\4\0\1\u0159"+
    "\2\0\12\u0159\4\0\3\u0159\1\0\5\u0159\20\0\14\u0159"+
    "\71\0\1\u0194\5\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\1\u0195\13\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\1\u0196\17\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\5\34"+
    "\1\u0197\6\34\24\0\1\u0112\53\0\2\u0160\12\0\1\u0160"+
    "\6\0\1\146\7\0\3\u0160\23\0\2\u0160\1\0\1\u0160"+
    "\33\0\1\u0118\53\0\2\u0162\12\0\1\u0162\6\0\1\151"+
    "\7\0\3\u0162\23\0\2\u0162\1\0\1\u0162\10\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\10\34\1\u0198\3\34\1\0\2\34\1\u0199\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\5\34\1\u019a\6\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\5\34\1\u019b\6\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\1\34\1\u019c\12\34\1\0\2\34\1\u019d\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\1\u019e"+
    "\2\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\5\34\1\u019f\6\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\1\u01a0\13\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\3\34\1\u01a1\10\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\3\34\1\u01a2\10\34\1\0\2\34\1\u01a3\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\1\u01a4\13\34\1\0\2\34"+
    "\1\u01a5\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\5\34\1\u01a6\6\34\1\0\3\34\4\0"+
    "\1\34\2\0\3\34\1\u01a7\6\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\11\34\1\u01a8"+
    "\2\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\7\34\1\u01a9\4\34\1\0"+
    "\3\34\4\0\1\34\2\0\7\34\1\u01aa\2\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\3\34\1\u01ab\6\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\5\34\1\u01ac\4\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\2\34\1\u01ad\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\11\34\1\u01ae\2\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\1\u01af"+
    "\13\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\3\34\1\u01b0\10\34\1\0"+
    "\3\34\4\0\1\34\2\0\3\34\1\u01b1\6\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\1\u01b2\11\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\1\34"+
    "\1\u01b3\10\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\1\u01b4\13\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\2\34\1\u01b5\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\3\34\1\u01b6\10\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\1\u01b7\13\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\5\34\1\u01b8\6\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\34\1\u01b9\10\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\1\u01ba\13\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\5\34\1\u01bb\6\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\5\34"+
    "\1\u01bc\6\34\1\0\3\34\4\0\1\34\2\0\10\34"+
    "\1\u01bd\1\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\1\u01be\4\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\1\34\1\u01bf\12\34\25\0\1\273\70\0\1\u018e\100\0"+
    "\1\u01c0\75\0\1\u0155\54\0\1\u0192\22\0\1\273\52\0"+
    "\2\u01c1\12\0\1\u01c1\16\0\3\u01c1\23\0\2\u01c1\1\0"+
    "\1\u01c1\10\0\3\34\4\0\1\34\2\0\1\34\1\u01c2"+
    "\10\34\4\0\3\34\1\0\5\34\20\0\14\34\13\0"+
    "\1\u01c3\1\0\1\u01c4\24\0\1\u0196\34\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\1\u01c5\13\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\5\34\1\u01c6\6\34"+
    "\1\0\3\34\4\0\1\34\2\0\11\34\1\u01c7\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\1\u01c8\13\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\1\u01c9\13\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\5\34\1\u01ca\6\34\1\0\3\34\4\0"+
    "\1\34\2\0\11\34\1\u01cb\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\1\u01cc"+
    "\11\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\1\34\1\u01cd\10\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\1\u01ce\13\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\6\34\1\u01cf\5\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\3\34\1\u01d0\10\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\1\34\1\u01d1\12\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\1\u01d2"+
    "\13\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\3\34\1\u01d3\10\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\3\34\1\u01d4\10\34\1\0\3\34\4\0"+
    "\1\34\2\0\3\34\1\u01d5\6\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\11\34\1\u01d6\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\2\34\1\u01d7\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\1\34\1\u01d8\12\34\1\0\2\34\1\u01d9\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\1\u01da\11\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\1\34\1\u01db\10\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\5\34\1\u01dc"+
    "\6\34\1\0\3\34\4\0\1\34\2\0\3\34\1\u01dd"+
    "\6\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\1\34\1\u01de\10\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\7\34\1\u01df\2\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\10\34\1\u01e0\1\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\2\34\1\u01e1\11\34\1\0"+
    "\3\34\4\0\1\34\2\0\1\34\1\u01e2\10\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\1\34\1\u01e3\10\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\1\u01e4\13\34"+
    "\1\0\3\34\4\0\1\34\2\0\1\u01e5\11\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\5\34\1\u01e6\6\34\24\0\1\u018e\53\0\2\u01c1\12\0"+
    "\1\u01c1\6\0\1\273\7\0\3\u01c1\23\0\2\u01c1\1\0"+
    "\1\u01c1\12\0\1\u01e7\157\0\1\u01e8\11\0\3\34\4\0"+
    "\1\34\2\0\2\34\1\u01e9\7\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\34\1\u01ea\10\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\1\34\1\u01eb"+
    "\10\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\2\34\1\u01ec\7\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\2\34\1\u01ed\7\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\1\u01ee\13\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\5\34\1\u01ef\6\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\u01f0\11\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\1\u01f1\2\34\1\0\5\34\20\0\14\34"+
    "\1\0\2\34\1\u01f2\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\2\34\1\u01f3"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\2\34"+
    "\1\u01f4\7\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\5\34\1\u01f5\6\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\7\34\1\u01f6\4\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\2\34"+
    "\1\u01f7\11\34\1\0\2\34\1\u01f8\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\3\34\1\u01f9\10\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\5\34\1\u01fa\6\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\1\u01fb\2\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\10\34\1\u01fc\1\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\4\34\1\u01fd\5\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\2\34"+
    "\1\u01fe\11\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\1\u01ff\13\34\1\0"+
    "\2\34\1\u0200\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\7\34"+
    "\1\u0201\4\34\1\0\2\34\1\u0202\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\2\34\1\u0203\7\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\16\0\1\u0204\62\0"+
    "\1\u0205\73\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\2\34\1\u0206\11\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\1\u0207\2\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\2\34\1\u0208\7\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\2\34"+
    "\1\u0209\7\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\2\34\1\u020a\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\11\34\1\u020b\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\1\34\1\u020c\12\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\1\u020d"+
    "\2\34\1\0\5\34\20\0\14\34\1\0\2\34\1\u020e"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\3\34\1\u020f\10\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\5\34\1\u0210\6\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\1\u0211\13\34\1\0\3\34\4\0\1\34\2\0"+
    "\11\34\1\u0212\4\0\3\34\1\0\5\34\20\0\4\34"+
    "\1\u0213\7\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\1\u0214\13\34\1\0"+
    "\2\34\1\u0215\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\1\34\1\u0216\10\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\1\u0217\17\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\5\34\1\u0218\6\34\24\0\1\u0219\67\0"+
    "\1\u021a\60\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\11\34\1\u021b\2\34\1\0"+
    "\3\34\4\0\1\34\2\0\11\34\1\u021c\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\1\u021d"+
    "\13\34\1\0\2\34\1\u021e\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\11\34\1\u021f\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\6\34\1\u0220"+
    "\5\34\1\0\3\34\4\0\1\34\2\0\1\34\1\u0221"+
    "\10\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\2\34\1\u0222\7\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\2\34\1\u0223"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\10\34"+
    "\1\u0224\1\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\11\34\1\u0225\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\5\34\1\u0226\6\34\42\0\1\u0217\17\0\1\u0227\14\0"+
    "\3\34\4\0\1\34\2\0\1\34\1\u0228\10\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\14\0\1\u0229\75\0"+
    "\1\u022a\62\0\2\34\1\u022b\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\5\34\1\u022c\4\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\5\34\1\u022d\4\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\2\34\1\u022e\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\5\34\1\u022f\4\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\20\0"+
    "\3\34\1\u0230\10\34\1\0\3\34\4\0\1\34\2\0"+
    "\5\34\1\u0231\4\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\10\34\1\u0232"+
    "\1\34\4\0\3\34\1\0\5\34\20\0\14\34\16\0"+
    "\1\u0233\62\0\1\u0204\73\0\3\34\4\0\1\34\2\0"+
    "\5\34\1\u0234\4\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\3\34\1\u0235"+
    "\6\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\3\34\1\u0236\6\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\3\34\1\u0237\6\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\4\34\1\u0238\5\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\3\34\1\u0239"+
    "\6\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\20\0\1\u023a\13\34\17\0\1\u023b\57\0\3\34"+
    "\4\0\1\34\2\0\3\34\1\u023c\6\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\3\34"+
    "\1\u023d\10\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\2\34\1\u023e\11\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\20\0\3\34\1\u023f\10\34\1\0\3\34"+
    "\4\0\1\34\2\0\3\34\1\u0240\6\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\2\34"+
    "\1\u0241\11\34\3\0\1\u0242\73\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\20\0\3\34"+
    "\1\u0243\10\34\1\0\3\34\4\0\1\34\2\0\3\34"+
    "\1\u0244\6\34\4\0\3\34\1\0\5\34\20\0\14\34"+
    "\1\0\2\34\1\u0245\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\3\34\1\u0246\6\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\34\1\u0247\10\34\4\0\3\34\1\0\5\34\20\0"+
    "\14\34\1\0\2\34\1\u0248\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\24\0\1\u0249"+
    "\52\0\3\34\4\0\1\34\2\0\3\34\1\u024a\6\34"+
    "\4\0\3\34\1\0\5\34\20\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\34\1\u024b\10\34\4\0\3\34"+
    "\1\0\5\34\20\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\1\34\1\u024c\10\34\4\0\3\34\1\0\5\34"+
    "\20\0\14\34\1\0\3\34\4\0\1\34\2\0\11\34"+
    "\1\u024d\4\0\3\34\1\0\5\34\20\0\14\34\20\0"+
    "\1\u024e\56\0\3\34\4\0\1\34\2\0\1\34\1\u024f"+
    "\10\34\4\0\3\34\1\0\5\34\20\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\10\34\1\u0250\1\34\4\0"+
    "\3\34\1\0\5\34\20\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\10\34\1\u0251\1\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\16\0\1\u0252\60\0\3\34\4\0"+
    "\1\34\2\0\10\34\1\u0253\1\34\4\0\3\34\1\0"+
    "\5\34\20\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\20\0\3\34\1\u0254"+
    "\10\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\3\34\1\u0255\10\34\64\0"+
    "\1\u0256\12\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\20\0\3\34\1\u0257\10\34\3\0"+
    "\1\u0258\134\0\1\u0259\40\0\1\u025a\1\0\1\u025b\32\0"+
    "\1\u0259\33\0\5\u025a\1\u025c\1\u025d\67\u025a\6\u025b\1\u025e"+
    "\1\u025f\66\u025b\5\0\1\u025a\103\0\1\u0260\1\0\1\u0260"+
    "\1\u0261\2\0\1\u0262\12\0\1\u0263\54\0\1\u0264\1\0"+
    "\1\u0264\1\u0265\2\0\1\u0266\12\0\1\u0267\50\0\1\u025b"+
    "\102\0\1\u0268\100\0\1\u0269\1\u026a\77\0\1\u026b\55\0"+
    "\1\u026c\30\0\1\u026d\56\0\1\u026e\100\0\1\u026f\1\u0270"+
    "\77\0\1\u0271\55\0\1\u0272\30\0\1\u0273\67\0\1\u025a"+
    "\70\0\1\u0268\100\0\1\u0274\75\0\1\u0260\54\0\1\u026c"+
    "\22\0\1\u025a\52\0\2\u0275\12\0\1\u0275\16\0\3\u0275"+
    "\23\0\2\u0275\1\0\1\u0275\34\0\1\u025b\70\0\1\u026e"+
    "\100\0\1\u0276\75\0\1\u0264\54\0\1\u0272\22\0\1\u025b"+
    "\52\0\2\u0277\12\0\1\u0277\16\0\3\u0277\23\0\2\u0277"+
    "\1\0\1\u0277\33\0\1\u0268\53\0\2\u0275\12\0\1\u0275"+
    "\6\0\1\u025a\7\0\3\u0275\23\0\2\u0275\1\0\1\u0275"+
    "\33\0\1\u026e\53\0\2\u0277\12\0\1\u0277\6\0\1\u025b"+
    "\7\0\3\u0277\23\0\2\u0277\1\0\1\u0277\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31186];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\3\1\1\11\3\1\2\11\12\1\1\11"+
    "\2\1\2\11\6\1\1\11\1\1\1\11\1\1\5\11"+
    "\1\1\1\11\13\1\1\11\3\1\3\11\1\1\2\11"+
    "\1\1\1\11\5\1\2\11\3\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\0\5\1\1\0"+
    "\1\1\3\0\1\1\1\11\32\1\4\11\1\1\1\11"+
    "\3\1\1\0\1\1\1\0\11\11\23\1\5\11\5\0"+
    "\2\11\3\0\2\1\1\0\5\1\10\0\32\1\1\0"+
    "\30\1\11\0\1\11\1\0\1\11\5\1\14\0\30\1"+
    "\1\0\31\1\2\11\1\0\1\11\5\0\1\1\1\0"+
    "\4\1\4\0\53\1\6\0\1\11\1\1\1\0\51\1"+
    "\2\0\1\1\2\0\42\1\2\0\33\1\2\0\21\1"+
    "\1\0\1\1\2\0\14\1\1\0\1\1\1\11\1\0"+
    "\10\1\1\0\7\1\1\0\6\1\1\0\6\1\1\0"+
    "\4\1\1\0\3\1\1\0\3\1\1\0\1\1\4\0"+
    "\1\1\2\0\1\1\30\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[631];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public _XQueryLexer() {
    this((java.io.Reader)null);
  }


  private Stack<Integer> stack = new Stack<Integer>();

  private void pushState(int state) {
    stack.push(yystate());
    yybegin(state);
  }

  private void popState() {
    if (stack.empty()) {
        yybegin(YYINITIAL);

    } else {
        int state = stack.pop();
        yybegin(state);
    }
  }


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 86: 
          { yypushback(2); return XQueryTypes.NCNAME;
          }
        case 151: break;
        case 149: 
          { return XQueryTypes.K_GROUPING_SEPARATOR;
          }
        case 152: break;
        case 148: 
          { return XQueryTypes.K_DECIMAL_SEPARATOR;
          }
        case 153: break;
        case 135: 
          { return XQueryTypes.K_COLLATION;
          }
        case 154: break;
        case 91: 
          { return XQueryTypes.K_NODE;
          }
        case 155: break;
        case 90: 
          { return XQueryTypes.K_SOME;
          }
        case 156: break;
        case 63: 
          { return XQueryTypes.NODECOMP_LT;
          }
        case 157: break;
        case 67: 
          { return XQueryTypes.EQUAL_EQUAL;
          }
        case 158: break;
        case 60: 
          { return XQueryTypes.PRAGMA_END;
          }
        case 159: break;
        case 137: 
          { return XQueryTypes.K_MINUS_SIGN;
          }
        case 160: break;
        case 110: 
          { return XQueryTypes.K_XQUERY;
          }
        case 161: break;
        case 70: 
          { return XQueryTypes.PIPE_PIPE;
          }
        case 162: break;
        case 48: 
          { return XQueryTypes.LT;
          }
        case 163: break;
        case 62: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return XQueryTypes.LT_CHAR;
          }
        case 164: break;
        case 64: 
          { return XQueryTypes.LE_CHARS;
          }
        case 165: break;
        case 146: 
          { return XQueryTypes.K_COPY_NAMESPACES;
          }
        case 166: break;
        case 133: 
          { return XQueryTypes.K_UNORDERED;
          }
        case 167: break;
        case 41: 
          { return XQueryTypes.DIRCOMMENTCHAR;
          }
        case 168: break;
        case 31: 
          { pushState(APOS_STRING); return XQueryTypes.APOSTROPHE;
          }
        case 169: break;
        case 97: 
          { popState(); return XQueryTypes.URIQUALIFIEDNAME;
          }
        case 170: break;
        case 29: 
          { return XQueryTypes.NCNAME;
          }
        case 171: break;
        case 69: 
          { return XQueryTypes.NOT_EQUAL;
          }
        case 172: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 173: break;
        case 80: 
          { return XQueryTypes.DOUBLELITERAL;
          }
        case 174: break;
        case 23: 
          { return XQueryTypes.L_BRACKET;
          }
        case 175: break;
        case 74: 
          { pushState(EXPR_COMMENT); return XQueryBasicTypes.EXPR_COMMENT_START;
          }
        case 176: break;
        case 7: 
          { popState(); return XQueryTypes.R_C_BRACE;
          }
        case 177: break;
        case 68: 
          { pushState(QNAME);return XQueryTypes.SLASH_SLASH;
          }
        case 178: break;
        case 83: 
          { return XQueryTypes.K_MAP;
          }
        case 179: break;
        case 120: 
          { return XQueryTypes.K_VERSION;
          }
        case 180: break;
        case 58: 
          { return XQueryTypes.COLON_COLON;
          }
        case 181: break;
        case 52: 
          { return XQueryTypes.K_AT;
          }
        case 182: break;
        case 55: 
          { return XQueryTypes.K_OF;
          }
        case 183: break;
        case 22: 
          { return XQueryTypes.STAR_SIGN;
          }
        case 184: break;
        case 142: 
          { return XQueryTypes.K_NO_PRESERVE;
          }
        case 185: break;
        case 54: 
          { return XQueryTypes.K_OR;
          }
        case 186: break;
        case 73: 
          { return XQueryTypes.K_IF;
          }
        case 187: break;
        case 88: 
          { return XQueryTypes.K_ELSE;
          }
        case 188: break;
        case 99: 
          { return XQueryTypes.K_LEAST;
          }
        case 189: break;
        case 71: 
          { return XQueryTypes.NE;
          }
        case 190: break;
        case 138: 
          { return XQueryTypes.K_NO_INHERIT;
          }
        case 191: break;
        case 53: 
          { return XQueryTypes.K_AS;
          }
        case 192: break;
        case 130: 
          { pushState(QNAME); return XQueryTypes.K_VARIABLE;
          }
        case 193: break;
        case 34: 
          { popState(); return XQueryTypes.GT_CHAR;
          }
        case 194: break;
        case 116: 
          { return XQueryTypes.K_DECLARE;
          }
        case 195: break;
        case 61: 
          { return XQueryTypes.K_BY;
          }
        case 196: break;
        case 47: 
          { return XQueryTypes.LE;
          }
        case 197: break;
        case 79: 
          { return XQueryTypes.DBL_R_C_BRACE;
          }
        case 198: break;
        case 125: 
          { return XQueryTypes.K_ORDERING;
          }
        case 199: break;
        case 45: 
          { return XQueryTypes.STRINGLITERAL;
          }
        case 200: break;
        case 33: 
          { popState();pushState(ELEMENT_CONTENT); return XQueryTypes.GT_CHAR;
          }
        case 201: break;
        case 28: 
          { return XQueryBasicTypes.EXPR_COMMENT_CONTENT;
          }
        case 202: break;
        case 101: 
          { return XQueryTypes.K_ORDER;
          }
        case 203: break;
        case 128: 
          { return XQueryTypes.K_INSTANCE;
          }
        case 204: break;
        case 112: 
          { return XQueryTypes.K_IMPORT;
          }
        case 205: break;
        case 117: 
          { return XQueryTypes.K_DEFAULT;
          }
        case 206: break;
        case 93: 
          { return XQueryTypes.K_ITEM;
          }
        case 207: break;
        case 13: 
          { return XQueryTypes.HASH;
          }
        case 208: break;
        case 84: 
          { return XQueryTypes.K_FOR;
          }
        case 209: break;
        case 139: 
          { return XQueryTypes.K_DESCENDING;
          }
        case 210: break;
        case 121: 
          { return XQueryTypes.K_ENCODING;
          }
        case 211: break;
        case 109: 
          { return XQueryTypes.K_SWITCH;
          }
        case 212: break;
        case 126: 
          { return XQueryTypes.K_BASE_URI;
          }
        case 213: break;
        case 37: 
          { popState(); return XQueryTypes.QUOT;
          }
        case 214: break;
        case 113: 
          { return XQueryTypes.K_ELEMENT;
          }
        case 215: break;
        case 25: 
          { return XQueryTypes.COMA;
          }
        case 216: break;
        case 95: 
          { return XQueryTypes.PREDEFINEDENTITYREF;
          }
        case 217: break;
        case 10: 
          { return XQueryTypes.COLON;
          }
        case 218: break;
        case 145: 
          { return XQueryTypes.K_DECIMAL_FORMAT;
          }
        case 219: break;
        case 92: 
          { return XQueryTypes.K_CASE;
          }
        case 220: break;
        case 76: 
          { popState(); return XQueryTypes.CLOSE_TAG;
          }
        case 221: break;
        case 32: 
          { return XQueryTypes.S;
          }
        case 222: break;
        case 103: 
          { return XQueryTypes.K_DIGIT;
          }
        case 223: break;
        case 66: 
          { return XQueryTypes.GE_CHARS;
          }
        case 224: break;
        case 131: 
          { return XQueryTypes.K_ASCENDING;
          }
        case 225: break;
        case 11: 
          { return XQueryTypes.R_PAR;
          }
        case 226: break;
        case 38: 
          { popState(); return XQueryTypes.APOSTROPHE;
          }
        case 227: break;
        case 14: 
          { return TokenType.WHITE_SPACE;
          }
        case 228: break;
        case 15: 
          { pushState(START_TAG); return XQueryTypes.LT_CHAR;
          }
        case 229: break;
        case 4: 
          { pushState(QNAME);yypushback(yylength());return TokenType.WHITE_SPACE;
          }
        case 230: break;
        case 132: 
          { return XQueryTypes.K_PER_MILLE;
          }
        case 231: break;
        case 127: 
          { pushState(QNAME); return XQueryTypes.K_FUNCTION;
          }
        case 232: break;
        case 105: 
          { return XQueryTypes.K_EMPTY;
          }
        case 233: break;
        case 141: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { return XQueryTypes.K_EMPTY;
          }
        case 234: break;
        case 85: 
          { return XQueryTypes.K_NAN;
          }
        case 235: break;
        case 87: 
          { popState(); return XQueryTypes.DIR_COMMENT_END;
          }
        case 236: break;
        case 16: 
          { return XQueryTypes.GT_CHAR;
          }
        case 237: break;
        case 89: 
          { return XQueryTypes.K_THEN;
          }
        case 238: break;
        case 8: 
          { return XQueryTypes.SEMICOLON;
          }
        case 239: break;
        case 65: 
          { return XQueryTypes.NODECOMP_GT;
          }
        case 240: break;
        case 40: 
          { popState(); return XQueryTypes.NCNAME;
          }
        case 241: break;
        case 81: 
          { return XQueryTypes.K_LET;
          }
        case 242: break;
        case 27: 
          { return XQueryTypes.PIPE;
          }
        case 243: break;
        case 107: 
          { return XQueryTypes.K_OPTION;
          }
        case 244: break;
        case 144: 
          { return XQueryTypes.K_BOUNDARY_SPACE;
          }
        case 245: break;
        case 72: 
          { return XQueryTypes.K_IN;
          }
        case 246: break;
        case 51: 
          { return XQueryTypes.GT;
          }
        case 247: break;
        case 122: 
          { return XQueryTypes.K_GREATEST;
          }
        case 248: break;
        case 18: 
          { return XQueryTypes.EQUAL;
          }
        case 249: break;
        case 36: 
          { return XQueryTypes.CHAR;
          }
        case 250: break;
        case 98: 
          { return XQueryTypes.K_EVERY;
          }
        case 251: break;
        case 100: 
          { return XQueryTypes.K_GROUP;
          }
        case 252: break;
        case 78: 
          { return XQueryTypes.DBL_L_C_BRACE;
          }
        case 253: break;
        case 94: 
          { pushState(DIR_COMMENT); return XQueryTypes.DIR_COMMENT_BEGIN;
          }
        case 254: break;
        case 24: 
          { return XQueryTypes.R_BRACKET;
          }
        case 255: break;
        case 106: 
          { return XQueryTypes.K_MODULE;
          }
        case 256: break;
        case 136: 
          { return XQueryTypes.K_TYPESWITCH;
          }
        case 257: break;
        case 35: 
          { return XQueryTypes.ELEMENTCONTENTCHAR;
          }
        case 258: break;
        case 30: 
          { pushState(QUOT_STRING); return XQueryTypes.QUOT;
          }
        case 259: break;
        case 111: 
          { return XQueryTypes.K_RETURN;
          }
        case 260: break;
        case 123: 
          { pushState(ALLOWING);return XQueryTypes.K_ALLOWING;
          }
        case 261: break;
        case 108: 
          { return XQueryTypes.K_SCHEMA;
          }
        case 262: break;
        case 57: 
          { return XQueryTypes.PRAGMA_BEGIN;
          }
        case 263: break;
        case 104: 
          { return XQueryTypes.K_WHERE;
          }
        case 264: break;
        case 43: 
          { return XQueryTypes.DECIMALLITERAL;
          }
        case 265: break;
        case 147: 
          { return XQueryTypes.K_PATTERN_SEPARATOR;
          }
        case 266: break;
        case 75: 
          { popState(); return XQueryBasicTypes.EXPR_COMMENT_END;
          }
        case 267: break;
        case 129: 
          { return XQueryTypes.K_INFINITY;
          }
        case 268: break;
        case 46: 
          { pushState(URIQUALIFIED); yypushback(2);
          }
        case 269: break;
        case 96: 
          { return XQueryTypes.CHARREF;
          }
        case 270: break;
        case 59: 
          { return XQueryTypes.OP_ASSIGN;
          }
        case 271: break;
        case 140: 
          { return XQueryTypes.K_ZERO_DIGIT;
          }
        case 272: break;
        case 26: 
          { return XQueryTypes.PERCENT;
          }
        case 273: break;
        case 50: 
          { return XQueryTypes.GE;
          }
        case 274: break;
        case 134: 
          { return XQueryTypes.K_NAMESPACE;
          }
        case 275: break;
        case 3: 
          { return XQueryTypes.INTEGERLITERAL;
          }
        case 276: break;
        case 2: 
          { return XQueryTypes.DOT;
          }
        case 277: break;
        case 20: 
          { pushState(QNAME);return XQueryTypes.SLASH;
          }
        case 278: break;
        case 44: 
          { return XQueryTypes.EQ;
          }
        case 279: break;
        case 77: 
          { popState(); pushState(END_TAG); return XQueryTypes.END_TAG;
          }
        case 280: break;
        case 19: 
          { pushState(QNAME);return XQueryTypes.AT_SIGN;
          }
        case 281: break;
        case 150: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 8;
          { return XQueryTypes.K_FUNCTION;
          }
        case 282: break;
        case 12: 
          { return XQueryTypes.OP_MINUS;
          }
        case 283: break;
        case 6: 
          { pushState(YYINITIAL); return XQueryTypes.L_C_BRACE;
          }
        case 284: break;
        case 143: 
          { return XQueryTypes.K_CONSTRUCTION;
          }
        case 285: break;
        case 42: 
          { return XQueryTypes.DOT_DOT;
          }
        case 286: break;
        case 9: 
          { return XQueryTypes.L_PAR;
          }
        case 287: break;
        case 82: 
          { return XQueryTypes.K_AND;
          }
        case 288: break;
        case 39: 
          { yypushback(yylength()); popState();
          }
        case 289: break;
        case 21: 
          { return XQueryTypes.QUESTIONMARK;
          }
        case 290: break;
        case 49: 
          { return XQueryTypes.K_TO;
          }
        case 291: break;
        case 115: 
          { return XQueryTypes.K_ORDERED;
          }
        case 292: break;
        case 102: 
          { return XQueryTypes.K_STRIP;
          }
        case 293: break;
        case 56: 
          { pushState(EXPR_COMMENT);return XQueryBasicTypes.EXPR_COMMENT_START;
          }
        case 294: break;
        case 17: 
          { pushState(QNAME);return XQueryTypes.DOLLAR_SIGN;
          }
        case 295: break;
        case 119: 
          { return XQueryTypes.K_INHERIT;
          }
        case 296: break;
        case 118: 
          { return XQueryTypes.K_CONTEXT;
          }
        case 297: break;
        case 124: 
          { return XQueryTypes.K_PRESERVE;
          }
        case 298: break;
        case 114: 
          { return XQueryTypes.K_PERCENT;
          }
        case 299: break;
        case 5: 
          { return XQueryTypes.OP_PLUS;
          }
        case 300: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
