/* The following code was generated by JFlex 1.4.3 on 17/06/13 09:06 */

package org.intellij.xquery;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.xquery.psi.XQueryBasicTypes;
import org.intellij.xquery.psi.XQueryTypes;
import com.intellij.psi.TokenType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/06/13 09:06 from the specification file
 * <tt>/home/ligasgr/wrk/intellij-xquery/src/org/intellij/xquery/XQuery.flex</tt>
 */
class _XQueryLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int APOS_STRING = 12;
  public static final int END_TAG = 6;
  public static final int URIQUALIFIED = 14;
  public static final int EXPR_COMMENT = 2;
  public static final int ELEMENT_CONTENT = 8;
  public static final int DIR_COMMENT = 20;
  public static final int YYINITIAL = 0;
  public static final int QUOT_STRING = 10;
  public static final int START_TAG = 4;
  public static final int QNAME = 16;
  public static final int ALLOWING = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\42\1\43\2\0\1\42\22\0\1\42\1\60\1\5\1\34"+
    "\1\47\1\61\1\6\1\7\1\26\1\30\1\54\1\4\1\57\1\31"+
    "\1\1\1\52\12\2\1\27\1\25\1\45\1\50\1\46\1\53\1\51"+
    "\4\37\1\36\1\37\5\32\1\32\1\32\1\75\2\32\1\10\6\32"+
    "\1\32\2\32\1\55\1\44\1\56\1\44\1\32\1\44\1\16\1\35"+
    "\1\65\1\64\1\3\1\67\1\15\1\74\1\70\2\32\1\13\1\17"+
    "\1\63\1\23\1\20\1\21\1\66\1\24\1\14\1\22\1\71\1\73"+
    "\1\33\1\72\1\76\1\11\1\62\1\12\71\44\1\41\10\44\27\32"+
    "\1\44\37\32\1\44\u0208\32\160\41\16\32\1\44\u0d81\32\u0f00\32\14\44"+
    "\2\32\61\44\2\41\57\44\u0120\32\u0a70\44\u03f0\32\21\44\ua7ff\32\1\40"+
    "\u03ff\0\u047f\0\37777777600\40\2\0\11\0\1\42\1\43\2\0\1\42";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\4\1\5\2\1\1\4"+
    "\1\6\1\7\12\4\1\10\1\11\1\12\1\13\1\14"+
    "\1\4\1\15\1\4\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\1"+
    "\1\32\1\33\12\4\3\34\1\35\1\36\1\37\1\12"+
    "\1\40\1\41\1\22\1\1\1\42\1\43\1\6\1\1"+
    "\1\16\1\17\1\44\1\45\1\44\1\6\1\44\1\46"+
    "\1\1\1\47\1\50\1\47\2\51\1\52\1\53\1\0"+
    "\2\4\1\54\2\4\1\0\1\55\3\0\1\55\1\56"+
    "\1\57\1\60\1\61\2\4\1\62\1\63\2\4\1\64"+
    "\1\65\11\4\1\66\1\67\5\4\1\70\1\71\1\72"+
    "\1\73\1\4\1\74\2\4\1\75\1\0\1\76\1\0"+
    "\1\77\1\76\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\13\4\1\110\1\111\5\4\1\112\1\113"+
    "\1\114\1\43\1\115\5\0\1\116\1\117\3\0\1\1"+
    "\1\120\1\0\5\4\10\0\1\121\7\4\1\122\1\123"+
    "\20\4\1\76\1\0\15\4\1\124\10\4\1\125\1\4"+
    "\11\0\1\126\1\0\1\127\1\4\1\130\3\4\14\0"+
    "\2\4\1\131\4\4\1\0\13\4\1\132\5\4\1\76"+
    "\1\0\3\4\1\133\5\4\1\134\6\4\1\135\10\4"+
    "\1\136\1\137\1\0\1\140\5\0\1\141\1\0\3\4"+
    "\1\142\4\0\1\143\2\4\1\144\2\4\1\0\10\4"+
    "\1\145\1\146\15\4\1\147\14\4\1\150\1\4\6\0"+
    "\1\151\1\4\1\0\6\4\1\0\1\152\6\4\1\153"+
    "\3\4\1\154\1\155\1\156\15\4\1\157\1\4\1\160"+
    "\6\4\2\0\1\161\2\0\11\4\1\162\3\4\1\163"+
    "\10\4\1\164\1\4\1\165\2\4\1\166\4\4\1\167"+
    "\1\170\2\4\2\0\1\171\1\4\1\172\1\4\1\173"+
    "\4\4\1\174\1\4\1\175\1\4\1\176\11\4\1\177"+
    "\1\200\1\201\1\202\1\4\2\0\2\4\1\203\1\4"+
    "\1\204\1\4\1\205\1\206\1\4\1\207\5\4\1\210"+
    "\2\4\1\0\1\4\2\0\1\211\1\4\1\212\3\4"+
    "\1\213\1\214\4\4\1\0\1\215\1\216\1\0\3\4"+
    "\1\217\4\4\1\0\6\4\1\220\1\0\6\4\1\0"+
    "\2\4\1\221\1\4\1\222\1\4\1\0\3\4\1\223"+
    "\1\0\3\4\1\0\1\4\1\224\1\225\1\0\1\226"+
    "\4\0\1\227\2\0\1\227\30\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[643];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u02b5"+
    "\0\u03b1\0\u03f0\0\u042f\0\u02b5\0\u02b5\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u02b5"+
    "\0\u06e4\0\u0723\0\u02b5\0\u02b5\0\u0762\0\u07a1\0\u07e0\0\u081f"+
    "\0\u085e\0\u089d\0\u02b5\0\u08dc\0\u02b5\0\u091b\0\u02b5\0\u02b5"+
    "\0\u02b5\0\u02b5\0\u02b5\0\u095a\0\u02b5\0\u0999\0\u09d8\0\u0a17"+
    "\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u02b5\0\u0c4e\0\u0c8d\0\u0ccc\0\u02b5\0\u02b5\0\u02b5\0\u0d0b"+
    "\0\u02b5\0\u02b5\0\u0d4a\0\u02b5\0\u0d89\0\u0dc8\0\u0e07\0\u0e46"+
    "\0\u0e85\0\u02b5\0\u02b5\0\u0ec4\0\u0f03\0\u0f42\0\u02b5\0\u0f81"+
    "\0\u02b5\0\u0fc0\0\u0fff\0\u02b5\0\u103e\0\u02b5\0\u107d\0\u10bc"+
    "\0\u10fb\0\u113a\0\u05e8\0\u1179\0\u11b8\0\u03b1\0\u11f7\0\u1236"+
    "\0\u03f0\0\u1275\0\u12b4\0\u02b5\0\u12f3\0\u05e8\0\u05e8\0\u1332"+
    "\0\u1371\0\u05e8\0\u05e8\0\u13b0\0\u13ef\0\u05e8\0\u142e\0\u146d"+
    "\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u16a4\0\u05e8\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u02b5"+
    "\0\u02b5\0\u02b5\0\u02b5\0\u181e\0\u02b5\0\u185d\0\u189c\0\u05e8"+
    "\0\u18db\0\u191a\0\u1959\0\u02b5\0\u02b5\0\u02b5\0\u02b5\0\u02b5"+
    "\0\u02b5\0\u02b5\0\u02b5\0\u02b5\0\u05e8\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e"+
    "\0\u1c4d\0\u05e8\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u02b5"+
    "\0\u02b5\0\u02b5\0\u02b5\0\u02b5\0\u1dc7\0\u1e06\0\u1e45\0\u1e84"+
    "\0\u1ec3\0\u02b5\0\u02b5\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u05e8\0\u2370"+
    "\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u05e8\0\u2529"+
    "\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721"+
    "\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919"+
    "\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11"+
    "\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u05e8"+
    "\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2"+
    "\0\u05e8\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b"+
    "\0\u30ba\0\u30f9\0\u3138\0\u02b5\0\u3177\0\u02b5\0\u31b6\0\u05e8"+
    "\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae"+
    "\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u35a6"+
    "\0\u35e5\0\u05e8\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f"+
    "\0\u379e\0\u37dd\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957"+
    "\0\u3996\0\u39d5\0\u05e8\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10"+
    "\0\u3b4f\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u05e8\0\u3c4b\0\u3c8a"+
    "\0\u3cc9\0\u3d08\0\u3d47\0\u05e8\0\u3d86\0\u3dc5\0\u3e04\0\u3e43"+
    "\0\u3e82\0\u3ec1\0\u05e8\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc"+
    "\0\u403b\0\u407a\0\u40b9\0\u02b5\0\u02b5\0\u40f8\0\u02b5\0\u4137"+
    "\0\u4176\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f"+
    "\0\u436e\0\u05e8\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u05e8\0\u44a9"+
    "\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1"+
    "\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b\0\u05e8\0\u485a"+
    "\0\u4899\0\u48d8\0\u4917\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u4a52"+
    "\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u05e8\0\u4b8d\0\u4bcc\0\u4c0b"+
    "\0\u4c4a\0\u4c89\0\u4cc8\0\u4d07\0\u4d46\0\u4d85\0\u4dc4\0\u4e03"+
    "\0\u4e42\0\u05e8\0\u4e81\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc"+
    "\0\u4ffb\0\u02b5\0\u503a\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175"+
    "\0\u51b4\0\u51f3\0\u5232\0\u05e8\0\u5271\0\u52b0\0\u52ef\0\u532e"+
    "\0\u536d\0\u53ac\0\u05e8\0\u53eb\0\u542a\0\u5469\0\u05e8\0\u05e8"+
    "\0\u05e8\0\u54a8\0\u54e7\0\u5526\0\u5565\0\u55a4\0\u55e3\0\u5622"+
    "\0\u5661\0\u56a0\0\u56df\0\u571e\0\u575d\0\u579c\0\u05e8\0\u57db"+
    "\0\u05e8\0\u581a\0\u5859\0\u5898\0\u58d7\0\u5916\0\u5955\0\u5994"+
    "\0\u59d3\0\u05e8\0\u5a12\0\u5a51\0\u5a90\0\u5acf\0\u5b0e\0\u5b4d"+
    "\0\u5b8c\0\u5bcb\0\u02b5\0\u5c0a\0\u5c49\0\u05e8\0\u5c88\0\u5cc7"+
    "\0\u5d06\0\u05e8\0\u5d45\0\u5d84\0\u5dc3\0\u5e02\0\u5e41\0\u5e80"+
    "\0\u5ebf\0\u5efe\0\u05e8\0\u5f3d\0\u05e8\0\u5f7c\0\u5fbb\0\u05e8"+
    "\0\u5ffa\0\u6039\0\u6078\0\u60b7\0\u05e8\0\u05e8\0\u60f6\0\u6135"+
    "\0\u6174\0\u61b3\0\u05e8\0\u61f2\0\u05e8\0\u6231\0\u05e8\0\u6270"+
    "\0\u62af\0\u62ee\0\u632d\0\u05e8\0\u636c\0\u05e8\0\u63ab\0\u05e8"+
    "\0\u63ea\0\u6429\0\u6468\0\u64a7\0\u64e6\0\u6525\0\u6564\0\u65a3"+
    "\0\u65e2\0\u6621\0\u05e8\0\u05e8\0\u05e8\0\u6660\0\u669f\0\u66de"+
    "\0\u671d\0\u675c\0\u05e8\0\u679b\0\u05e8\0\u67da\0\u05e8\0\u05e8"+
    "\0\u6819\0\u05e8\0\u6858\0\u6897\0\u68d6\0\u6915\0\u6954\0\u05e8"+
    "\0\u6993\0\u69d2\0\u6a11\0\u6a50\0\u6a8f\0\u6ace\0\u05e8\0\u6b0d"+
    "\0\u05e8\0\u6b4c\0\u6b8b\0\u6bca\0\u05e8\0\u05e8\0\u6c09\0\u6c48"+
    "\0\u6c87\0\u6cc6\0\u6d05\0\u05e8\0\u02b5\0\u6d44\0\u6d83\0\u6dc2"+
    "\0\u6e01\0\u05e8\0\u6e40\0\u6e7f\0\u6ebe\0\u6efd\0\u6f3c\0\u6f7b"+
    "\0\u6fba\0\u6ff9\0\u7038\0\u7077\0\u70b6\0\u05e8\0\u70f5\0\u7134"+
    "\0\u7173\0\u71b2\0\u71f1\0\u7230\0\u726f\0\u72ae\0\u72ed\0\u732c"+
    "\0\u05e8\0\u736b\0\u05e8\0\u73aa\0\u73e9\0\u7428\0\u7467\0\u74a6"+
    "\0\u05e8\0\u74e5\0\u7524\0\u7563\0\u75a2\0\u75e1\0\u7620\0\u05e8"+
    "\0\u05e8\0\u765f\0\u05e8\0\u769e\0\u76dd\0\u771c\0\u775b\0\u779a"+
    "\0\u77d9\0\u7818\0\u7857\0\u7896\0\u78d5\0\u7914\0\u7953\0\u7992"+
    "\0\u79d1\0\u7a10\0\u7a4f\0\u7a8e\0\u7acd\0\u7b0c\0\u7b4b\0\u7b8a"+
    "\0\u7bc9\0\u7c08\0\u7c47\0\u7c86\0\u7cc5\0\u7d04\0\u7d43\0\u7d82"+
    "\0\u7dc1\0\u7e00\0\u7e3f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[643];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\14\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\34\1\45\1\46\1\47\3\34\1\14"+
    "\2\50\1\14\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\34"+
    "\1\76\1\34\1\77\1\100\1\14\25\101\1\102\1\103"+
    "\10\101\1\14\36\101\3\14\1\104\1\14\1\105\1\14"+
    "\1\106\1\104\2\14\12\104\2\14\1\107\2\14\2\104"+
    "\1\14\4\104\1\14\2\110\2\14\1\111\1\14\1\112"+
    "\1\14\1\113\10\14\14\104\3\14\1\104\4\14\1\104"+
    "\2\14\12\104\2\14\1\107\2\14\2\104\1\14\4\104"+
    "\1\14\2\110\2\14\1\114\14\14\14\104\11\115\1\116"+
    "\1\117\27\115\2\120\1\115\1\121\31\115\1\14\4\122"+
    "\1\123\1\124\2\122\1\125\1\126\25\122\1\14\36\122"+
    "\1\14\5\122\1\124\1\127\1\122\1\125\1\126\25\122"+
    "\1\14\36\122\10\14\1\130\31\14\2\50\33\14\3\131"+
    "\1\132\4\131\1\132\2\131\12\132\2\131\1\107\2\131"+
    "\2\132\1\131\4\132\2\131\1\0\17\131\14\132\3\131"+
    "\1\133\36\131\2\50\33\131\1\14\30\134\1\135\6\134"+
    "\1\14\36\134\100\0\1\136\1\137\75\0\1\137\1\16"+
    "\1\140\32\0\1\140\41\0\3\34\4\0\1\34\2\0"+
    "\1\141\3\34\1\142\1\34\1\143\3\34\4\0\3\34"+
    "\1\0\5\34\21\0\1\144\5\34\1\145\5\34\5\146"+
    "\1\147\1\150\70\146\6\151\1\152\1\153\67\151\1\0"+
    "\3\34\4\0\1\34\1\154\1\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\2\34\1\155\4\0"+
    "\1\34\2\0\1\34\1\156\10\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\10\34\1\157\1\34\4\0\3\34\1\0\5\34\21\0"+
    "\7\34\1\160\1\34\1\161\2\34\1\0\2\34\1\162"+
    "\4\0\1\34\2\0\1\34\1\163\10\34\4\0\3\34"+
    "\1\0\5\34\21\0\3\34\1\164\10\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\165\1\166\7\34\1\167\4\0"+
    "\3\34\1\0\5\34\21\0\1\170\13\34\1\0\3\34"+
    "\4\0\1\34\2\0\3\34\1\171\4\34\1\172\1\34"+
    "\4\0\3\34\1\0\5\34\21\0\5\34\1\173\6\34"+
    "\1\0\2\34\1\174\4\0\1\34\2\0\3\34\1\175"+
    "\6\34\4\0\3\34\1\0\5\34\21\0\3\34\1\176"+
    "\10\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\1\177\13\34\1\0\3\34\4\0\1\34\2\0\5\34"+
    "\1\200\4\34\4\0\3\34\1\0\5\34\21\0\3\34"+
    "\1\201\1\202\7\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\34\1\203\1\34\1\204\4\34\1\205\1\34\4\0"+
    "\3\34\1\0\5\34\21\0\2\34\1\206\5\34\1\207"+
    "\3\34\27\0\1\210\4\0\1\211\71\0\1\212\20\0"+
    "\1\213\27\0\3\34\4\0\1\34\2\0\6\34\1\214"+
    "\3\34\4\0\3\34\1\0\5\34\21\0\14\34\30\0"+
    "\1\215\47\0\3\34\4\0\1\34\2\0\3\34\1\216"+
    "\4\34\1\217\1\34\4\0\3\34\1\0\5\34\21\0"+
    "\7\34\1\220\4\34\42\0\2\50\34\0\1\221\1\222"+
    "\37\0\2\223\1\0\1\224\1\0\1\225\1\226\74\0"+
    "\1\227\1\0\1\230\76\0\1\231\100\0\1\232\74\0"+
    "\1\233\110\0\1\234\15\0\2\34\1\235\4\0\1\34"+
    "\2\0\3\34\1\236\4\34\1\237\1\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\2\34\1\240\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\5\34\1\241\6\34\1\0\3\34\4\0\1\34\2\0"+
    "\3\34\1\242\4\34\1\243\1\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\2\34\1\244\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\7\34\1\245\1\246"+
    "\1\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\1\34\1\247\2\34\1\250"+
    "\5\34\4\0\3\34\1\0\5\34\21\0\1\251\3\34"+
    "\1\252\7\34\1\0\2\34\1\253\4\0\1\34\2\0"+
    "\3\34\1\254\6\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\11\34\1\255\2\34\1\0"+
    "\3\34\4\0\1\34\2\0\3\34\1\256\6\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\2\34\1\257"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\27\0\1\260\77\0\1\261\47\0\3\104"+
    "\4\0\1\104\2\0\12\104\4\0\3\104\1\0\5\104"+
    "\21\0\14\104\42\0\2\110\101\0\1\262\30\0\11\115"+
    "\2\0\32\115\1\0\31\115\11\0\1\263\77\0\1\263"+
    "\64\0\11\115\2\0\27\115\2\120\1\115\1\0\31\115"+
    "\52\0\1\264\5\0\1\265\31\0\1\266\1\0\1\266"+
    "\1\267\2\0\1\270\12\0\1\271\53\0\1\272\77\0"+
    "\1\273\75\0\1\274\66\0\3\132\4\0\1\132\2\0"+
    "\12\132\2\0\1\275\1\0\3\132\1\0\5\132\21\0"+
    "\14\132\17\0\1\276\110\0\1\277\47\0\1\137\1\140"+
    "\32\0\1\140\42\0\1\300\1\0\1\301\24\0\1\301"+
    "\46\0\2\34\1\302\4\0\1\34\2\0\11\34\1\303"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\5\34\1\304\4\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\2\34"+
    "\1\305\11\34\1\0\2\34\1\306\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\14\34\5\0"+
    "\1\146\104\0\1\307\1\0\1\307\1\310\2\0\1\311"+
    "\12\0\1\312\55\0\1\313\1\0\1\313\1\314\2\0"+
    "\1\315\12\0\1\316\51\0\1\151\70\0\3\34\4\0"+
    "\1\34\2\0\1\34\1\317\1\34\1\320\6\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\5\34\1\321\4\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\2\34\1\322\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\2\34\1\323\4\0\1\34\2\0\10\34\1\324"+
    "\1\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\1\325\11\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\2\34"+
    "\1\326\11\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\1\34\1\327\12\34"+
    "\1\0\3\34\4\0\1\34\2\0\5\34\1\330\4\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\1\34\1\331\12\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\1\332"+
    "\13\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\3\34\1\333\10\34\1\0"+
    "\3\34\4\0\1\34\2\0\1\34\1\334\10\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\2\34\1\335"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\10\34"+
    "\1\336\1\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\1\34\1\337\10\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\1\34\1\340\12\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\3\34"+
    "\1\341\10\34\1\0\3\34\4\0\1\34\2\0\1\34"+
    "\1\342\10\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\4\34\1\343\5\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\11\34\1\344\2\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\5\34"+
    "\1\345\6\34\1\0\3\34\4\0\1\34\2\0\7\34"+
    "\1\346\2\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\11\34\1\347\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\7\34\1\350\2\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\2\0\1\351\75\0\1\351\1\222"+
    "\1\352\32\0\1\352\41\0\1\221\1\222\37\0\2\223"+
    "\3\0\1\225\30\0\3\34\4\0\1\34\2\0\4\34"+
    "\1\353\5\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\1\354"+
    "\2\34\1\0\5\34\21\0\1\34\1\355\12\34\1\0"+
    "\3\34\4\0\1\34\2\0\11\34\1\356\4\0\3\34"+
    "\1\0\5\34\21\0\2\34\1\357\1\34\1\360\7\34"+
    "\1\0\3\34\4\0\1\34\2\0\2\34\1\361\7\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\11\34\1\362\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\363\4\34\1\364\4\34\4\0\3\34\1\0\5\34"+
    "\21\0\1\365\13\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\34\1\366\10\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\1\367\13\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\3\34\1\370\10\34\1\0\2\34\1\371\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\5\34\1\372"+
    "\4\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\11\34\1\373\4\0\3\34"+
    "\1\0\5\34\21\0\4\34\1\374\4\34\1\375\2\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\3\34\1\376\10\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\3\34\1\377\10\34\1\0\2\34\1\u0100\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\12\34\1\u0101\1\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\3\34\1\u0102\10\34\31\0\1\u0103\61\0"+
    "\1\u0104\101\0\1\u0105\1\u0106\100\0\1\u0107\56\0\1\u0108"+
    "\30\0\1\u0109\43\0\6\274\1\u010a\2\274\1\0\1\u010b"+
    "\64\274\3\0\1\u010c\4\0\1\u010c\2\0\12\u010c\5\0"+
    "\2\u010c\1\0\4\u010c\22\0\14\u010c\20\0\1\u010d\124\0"+
    "\1\u010e\32\0\1\300\75\0\3\34\4\0\1\34\2\0"+
    "\4\34\1\u010f\5\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\2\34\1\u0110\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\34\1\u0111\10\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\10\34\1\u0112\1\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\3\34\1\u0113\10\34"+
    "\14\0\1\u0114\101\0\1\u0115\1\u0116\100\0\1\u0117\56\0"+
    "\1\u0118\30\0\1\u0119\57\0\1\u011a\101\0\1\u011b\1\u011c"+
    "\100\0\1\u011d\56\0\1\u011e\30\0\1\u011f\44\0\3\34"+
    "\4\0\1\34\2\0\11\34\1\u0120\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\2\34\1\u0121\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\1\u0122\13\34\1\0\3\34\4\0"+
    "\1\34\2\0\3\34\1\u0123\6\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\7\34\1\u0124\2\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\10\34\1\u0125"+
    "\1\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\2\34\1\u0126\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\2\0\1\u0127\1\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\7\34"+
    "\1\u0128\2\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\7\34\1\u0129\2\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\1\u012a\2\34\1\0"+
    "\5\34\21\0\2\34\1\u012b\11\34\1\0\3\34\4\0"+
    "\1\34\2\0\1\34\1\u012c\10\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\11\34\1\u012d\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\3\34\1\u012e\10\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\5\34\1\u012f\6\34\1\0\2\34\1\u0130\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\5\34\1\u0131\6\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\5\34\1\u0132\6\34\1\0\2\34\1\u0133"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\2\34\1\u0134\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\1\34\1\u0135\10\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\2\34\1\u0136"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\2\34\1\u0137\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\1\u0138\13\34\2\0\1\351\1\352\32\0"+
    "\1\352\42\0\1\u0139\1\0\1\u013a\24\0\1\u013a\46\0"+
    "\2\34\1\u013b\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\5\34\1\u013c\4\34\4\0\3\34\1\0\5\34"+
    "\21\0\5\34\1\u013d\6\34\1\0\2\34\1\u013e\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\2\34\1\u013f\11\34\1\0"+
    "\3\34\4\0\1\34\2\0\1\u0140\11\34\4\0\3\34"+
    "\1\0\5\34\21\0\5\34\1\u0141\6\34\1\0\3\34"+
    "\4\0\1\34\2\0\3\34\1\u0142\6\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\5\34"+
    "\1\u0143\6\34\1\0\2\34\1\u0144\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\1\u0145\11\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\7\34"+
    "\1\u0146\4\34\1\0\3\34\4\0\1\34\2\0\1\34"+
    "\1\u0147\7\34\1\u0148\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\7\34\1\u0149"+
    "\2\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\2\34\1\u014a\11\34\1\0\3\34\4\0"+
    "\1\34\2\0\4\34\1\u014b\5\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\10\34\1\u014c\1\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\1\34\1\u014d"+
    "\10\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\5\34\1\u014e\6\34\1\0\2\34\1\u014f"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\11\34"+
    "\1\u0150\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\5\34\1\u0151\6\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\3\34\1\u0152\10\34\1\0\3\34\4\0\1\34\2\0"+
    "\10\34\1\u0153\1\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\31\0\1\u0154\72\0\1\u0155\71\0\1\u0104\101\0"+
    "\1\u0156\76\0\1\266\55\0\1\u0108\22\0\1\u0157\53\0"+
    "\2\u0158\12\0\1\u0158\16\0\3\u0158\24\0\2\u0158\1\0"+
    "\1\u0158\22\0\1\u0159\1\0\1\u0159\1\u015a\2\0\1\u015b"+
    "\12\0\1\u015c\45\0\1\u015d\4\0\1\u015d\2\0\12\u015d"+
    "\5\0\2\u015d\1\0\4\u015d\22\0\14\u015d\14\0\1\u015e"+
    "\63\0\2\34\1\u015f\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\7\34\1\u0160\4\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\1\34\1\u0161"+
    "\12\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\7\34\1\u0162\4\34\25\0"+
    "\1\146\71\0\1\u0114\101\0\1\u0163\76\0\1\307\55\0"+
    "\1\u0118\22\0\1\146\53\0\2\u0164\12\0\1\u0164\16\0"+
    "\3\u0164\24\0\2\u0164\1\0\1\u0164\34\0\1\151\71\0"+
    "\1\u011a\101\0\1\u0165\76\0\1\313\55\0\1\u011e\22\0"+
    "\1\151\53\0\2\u0166\12\0\1\u0166\16\0\3\u0166\24\0"+
    "\2\u0166\1\0\1\u0166\10\0\3\34\4\0\1\34\2\0"+
    "\1\34\1\u0167\10\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\11\34\1\u0168"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\34\1\u0169\10\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\5\34\1\u016a\4\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\10\34\1\u016b\3\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\1\u016c\13\34\17\0\1\u016d\60\0"+
    "\3\34\4\0\1\34\2\0\1\u016e\11\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\11\34\1\u016f\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\4\34\1\u0170"+
    "\5\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\2\34\1\u0171\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\2\34\1\u0172\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\2\34\1\u0173\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\1\34\1\u0174\12\34\1\0\3\34\4\0\1\34"+
    "\2\0\10\34\1\u0175\1\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\3\34\1\u0176\10\34"+
    "\1\0\3\34\4\0\1\34\2\0\5\34\1\u0177\4\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\11\34\1\u0178\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\4\34\1\u0179\5\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\2\34\1\u017a\11\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\3\34\1\u017b\10\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\1\u017c\2\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\1\34\1\u017d\12\34"+
    "\2\0\1\u0139\75\0\3\34\4\0\1\34\2\0\11\34"+
    "\1\u017e\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\3\34\1\u017f\10\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\1\u0180\13\34\1\0\2\34\1\u0181\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\3\34\1\u0182\6\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\4\34\1\u0183\5\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\7\34\1\u0184\2\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\1\34\1\u0185"+
    "\10\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\3\34\1\u0186\6\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\1\u0187\2\34\1\0\5\34"+
    "\21\0\14\34\1\0\2\34\1\u0188\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\1\34\1\u0189\10\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\3\34\1\u018a\10\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\34\1\u018b\10\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\3\34\1\u018c\10\34\1\0"+
    "\3\34\4\0\1\34\2\0\3\34\1\u018d\6\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\1\u018e\13\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\3\34\1\u018f\10\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\5\34\1\u0190\6\34\1\0\3\34"+
    "\4\0\1\34\2\0\3\34\1\u0191\6\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\2\34\1\u0192\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\1\u0193\2\34\1\0\5\34\21\0\14\34\24\0\1\u0104"+
    "\54\0\2\u0158\12\0\1\u0158\6\0\1\u0157\7\0\3\u0158"+
    "\24\0\2\u0158\1\0\1\u0158\23\0\1\u0194\101\0\1\u0195"+
    "\1\u0196\100\0\1\u0197\56\0\1\u0198\30\0\1\u0199\44\0"+
    "\3\u015d\4\0\1\u015d\2\0\12\u015d\4\0\3\u015d\1\0"+
    "\5\u015d\21\0\14\u015d\72\0\1\u019a\5\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\1\u019b\13\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\2\u019c\17\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\5\34\1\u019d\6\34\24\0\1\u0114\54\0"+
    "\2\u0164\12\0\1\u0164\6\0\1\146\7\0\3\u0164\24\0"+
    "\2\u0164\1\0\1\u0164\33\0\1\u011a\54\0\2\u0166\12\0"+
    "\1\u0166\6\0\1\151\7\0\3\u0166\24\0\2\u0166\1\0"+
    "\1\u0166\10\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\10\34\1\u019e\3\34\1\0"+
    "\2\34\1\u019f\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\5\34"+
    "\1\u01a0\6\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\5\34\1\u01a1\6\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\1\34\1\u01a2\12\34\16\0\1\u01a3"+
    "\61\0\2\34\1\u01a4\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\1\u01a5\2\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\5\34\1\u01a6\6\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\1\u01a7\13\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\3\34\1\u01a8\10\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\3\34\1\u01a9"+
    "\10\34\1\0\2\34\1\u01aa\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\1\u01ab\13\34\1\0\2\34\1\u01ac\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\5\34"+
    "\1\u01ad\6\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\4\34\1\u01ae\7\34"+
    "\1\0\3\34\4\0\1\34\2\0\3\34\1\u01af\6\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\11\34\1\u01b0\2\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\7\34"+
    "\1\u01b1\4\34\1\0\3\34\4\0\1\34\2\0\7\34"+
    "\1\u01b2\2\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\3\34\1\u01b3\6\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\5\34\1\u01b4\4\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\2\34\1\u01b5\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\11\34\1\u01b6\2\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\1\u01b7\13\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\3\34"+
    "\1\u01b8\10\34\1\0\3\34\4\0\1\34\2\0\3\34"+
    "\1\u01b9\6\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\1\u01ba\11\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\1\34\1\u01bb\10\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\1\u01bc\13\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\2\34"+
    "\1\u01bd\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\3\34\1\u01be\10\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\1\u01bf\13\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\5\34\1\u01c0\6\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\34\1\u01c1\10\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\1\u01c2"+
    "\13\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\5\34\1\u01c3\6\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\5\34\1\u01c4\6\34\1\0\3\34\4\0"+
    "\1\34\2\0\10\34\1\u01c5\1\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\1\u01c6\4\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\1\34\1\u01c7\12\34\25\0\1\274"+
    "\71\0\1\u0194\101\0\1\u01c8\76\0\1\u0159\55\0\1\u0198"+
    "\22\0\1\274\53\0\2\u01c9\12\0\1\u01c9\16\0\3\u01c9"+
    "\24\0\2\u01c9\1\0\1\u01c9\10\0\3\34\4\0\1\34"+
    "\2\0\1\34\1\u01ca\10\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\13\0\1\u01cb\1\0\1\u01cc\24\0\2\u019c"+
    "\34\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\1\u01cd\13\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\5\34\1\u01ce\6\34\1\0\3\34\4\0\1\34\2\0"+
    "\11\34\1\u01cf\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\1\u01d0\13\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\1\u01d1\13\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\5\34\1\u01d2\6\34"+
    "\20\0\1\u01d3\57\0\3\34\4\0\1\34\2\0\11\34"+
    "\1\u01d4\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\1\u01d5\11\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\1\34\1\u01d6\10\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\1\u01d7\13\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\6\34\1\u01d8\5\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\3\34\1\u01d9\10\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\1\34\1\u01da"+
    "\12\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\1\u01db\13\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\5\34\1\u01dc\6\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\3\34"+
    "\1\u01dd\10\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\3\34\1\u01de\10\34"+
    "\1\0\3\34\4\0\1\34\2\0\3\34\1\u01df\6\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\11\34\1\u01e0\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\2\34\1\u01e1\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\1\34\1\u01e2\12\34\1\0\2\34"+
    "\1\u01e3\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\u01e4\11\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\1\34\1\u01e5\10\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\5\34\1\u01e6\6\34\1\0\3\34\4\0\1\34"+
    "\2\0\3\34\1\u01e7\6\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\1\34"+
    "\1\u01e8\10\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\7\34\1\u01e9\2\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\10\34\1\u01ea\1\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\2\34"+
    "\1\u01eb\11\34\1\0\3\34\4\0\1\34\2\0\1\34"+
    "\1\u01ec\10\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\1\34\1\u01ed\10\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\1\u01ee\13\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\u01ef\11\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\5\34\1\u01f0\6\34\24\0\1\u0194"+
    "\54\0\2\u01c9\12\0\1\u01c9\6\0\1\274\7\0\3\u01c9"+
    "\24\0\2\u01c9\1\0\1\u01c9\12\0\1\u01f1\161\0\1\u01f2"+
    "\11\0\3\34\4\0\1\34\2\0\2\34\1\u01f3\7\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\34\1\u01f4\10\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\1\34\1\u01f5\10\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\2\34"+
    "\1\u01f6\7\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\2\34\1\u01f7\7\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\1\u01f8\13\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\5\34\1\u01f9"+
    "\6\34\1\0\3\34\4\0\1\34\2\0\1\u01fa\11\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\1\u01fb\2\34\1\0"+
    "\5\34\21\0\14\34\1\0\2\34\1\u01fc\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\2\34\1\u01fd\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\2\34\1\u01fe\7\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\2\34\1\u01ff\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\5\34\1\u0200\6\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\7\34\1\u0201\4\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\2\34"+
    "\1\u0202\11\34\1\0\2\34\1\u0203\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\3\34\1\u0204\10\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\5\34\1\u0205\6\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\1\u0206\2\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\10\34\1\u0207\1\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\4\34\1\u0208\5\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\2\34"+
    "\1\u0209\11\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\1\u020a\13\34\1\0"+
    "\2\34\1\u020b\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\7\34"+
    "\1\u020c\4\34\1\0\2\34\1\u020d\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\2\34\1\u020e\7\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\16\0\1\u020f\63\0"+
    "\1\u0210\74\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\2\34\1\u0211\11\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\1\u0212\2\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\2\34\1\u0213\7\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\2\34"+
    "\1\u0214\7\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\2\34\1\u0215\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\11\34\1\u0216\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\1\34\1\u0217\12\34"+
    "\1\0\3\34\4\0\1\34\2\0\11\34\1\u0218\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\1\u0219\2\34\1\0\5\34"+
    "\21\0\14\34\1\0\2\34\1\u021a\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\3\34\1\u021b\10\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\5\34\1\u021c\6\34\1\0\3\34\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\1\u021d\13\34"+
    "\1\0\3\34\4\0\1\34\2\0\11\34\1\u021e\4\0"+
    "\3\34\1\0\5\34\21\0\4\34\1\u021f\7\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\1\u0220\13\34\1\0\2\34\1\u0221\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\1\34\1\u0222"+
    "\10\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\2\u0223\17\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\5\34"+
    "\1\u0224\6\34\24\0\1\u0225\70\0\1\u0226\61\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\11\34\1\u0227\2\34\1\0\3\34\4\0\1\34"+
    "\2\0\11\34\1\u0228\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\1\u0229\13\34\1\0\2\34"+
    "\1\u022a\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\11\34\1\u022b\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\6\34\1\u022c\5\34\1\0\3\34"+
    "\4\0\1\34\2\0\1\34\1\u022d\10\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\2\34\1\u022e\7\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\2\34\1\u022f\4\0\1\34\2\0"+
    "\12\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\10\34\1\u0230\1\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\3\34\4\0"+
    "\1\34\2\0\11\34\1\u0231\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\5\34\1\u0232\6\34"+
    "\42\0\2\u0223\17\0\1\u0233\14\0\3\34\4\0\1\34"+
    "\2\0\1\34\1\u0234\10\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\14\0\1\u0235\76\0\1\u0236\63\0\2\34"+
    "\1\u0237\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\5\34\1\u0238\4\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\5\34\1\u0239"+
    "\4\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\2\34\1\u023a\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\5\34\1\u023b\4\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\12\34"+
    "\4\0\3\34\1\0\5\34\21\0\3\34\1\u023c\10\34"+
    "\1\0\3\34\4\0\1\34\2\0\5\34\1\u023d\4\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\10\34\1\u023e\1\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\16\0\1\u023f\63\0\1\u020f"+
    "\74\0\3\34\4\0\1\34\2\0\5\34\1\u0240\4\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\3\34\1\u0241\6\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\3\34\1\u0242\6\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\3\34"+
    "\1\u0243\6\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\4\34\1\u0244\5\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\3\34"+
    "\4\0\1\34\2\0\3\34\1\u0245\6\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\12\34\4\0\3\34\1\0\5\34\21\0\1\u0246"+
    "\13\34\17\0\1\u0247\60\0\3\34\4\0\1\34\2\0"+
    "\3\34\1\u0248\6\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\3\34\1\u0249\10\34\1\0"+
    "\3\34\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\2\34\1\u024a\11\34\1\0\3\34\4\0"+
    "\1\34\2\0\12\34\4\0\3\34\1\0\5\34\21\0"+
    "\3\34\1\u024b\10\34\1\0\3\34\4\0\1\34\2\0"+
    "\3\34\1\u024c\6\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\2\34\1\u024d\11\34\3\0"+
    "\1\u024e\74\0\3\34\4\0\1\34\2\0\12\34\4\0"+
    "\3\34\1\0\5\34\21\0\3\34\1\u024f\10\34\1\0"+
    "\3\34\4\0\1\34\2\0\3\34\1\u0250\6\34\4\0"+
    "\3\34\1\0\5\34\21\0\14\34\1\0\2\34\1\u0251"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\3\34"+
    "\1\u0252\6\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\1\34\1\u0253\10\34"+
    "\4\0\3\34\1\0\5\34\21\0\14\34\1\0\2\34"+
    "\1\u0254\4\0\1\34\2\0\12\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\24\0\1\u0255\53\0\3\34\4\0"+
    "\1\34\2\0\3\34\1\u0256\6\34\4\0\3\34\1\0"+
    "\5\34\21\0\14\34\1\0\3\34\4\0\1\34\2\0"+
    "\1\34\1\u0257\10\34\4\0\3\34\1\0\5\34\21\0"+
    "\14\34\1\0\3\34\4\0\1\34\2\0\1\34\1\u0258"+
    "\10\34\4\0\3\34\1\0\5\34\21\0\14\34\1\0"+
    "\3\34\4\0\1\34\2\0\11\34\1\u0259\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\20\0\1\u025a\57\0\3\34"+
    "\4\0\1\34\2\0\1\34\1\u025b\10\34\4\0\3\34"+
    "\1\0\5\34\21\0\14\34\1\0\3\34\4\0\1\34"+
    "\2\0\10\34\1\u025c\1\34\4\0\3\34\1\0\5\34"+
    "\21\0\14\34\1\0\3\34\4\0\1\34\2\0\10\34"+
    "\1\u025d\1\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\16\0\1\u025e\61\0\3\34\4\0\1\34\2\0\10\34"+
    "\1\u025f\1\34\4\0\3\34\1\0\5\34\21\0\14\34"+
    "\1\0\3\34\4\0\1\34\2\0\12\34\4\0\3\34"+
    "\1\0\5\34\21\0\3\34\1\u0260\10\34\1\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\3\34\1\u0261\10\34\65\0\1\u0262\12\0\3\34"+
    "\4\0\1\34\2\0\12\34\4\0\3\34\1\0\5\34"+
    "\21\0\3\34\1\u0263\10\34\3\0\1\u0264\135\0\2\u0265"+
    "\40\0\1\u0266\1\0\1\u0267\32\0\2\u0265\33\0\5\u0266"+
    "\1\u0268\1\u0269\70\u0266\6\u0267\1\u026a\1\u026b\67\u0267\5\0"+
    "\1\u0266\104\0\1\u026c\1\0\1\u026c\1\u026d\2\0\1\u026e"+
    "\12\0\1\u026f\55\0\1\u0270\1\0\1\u0270\1\u0271\2\0"+
    "\1\u0272\12\0\1\u0273\51\0\1\u0267\103\0\1\u0274\101\0"+
    "\1\u0275\1\u0276\100\0\1\u0277\56\0\1\u0278\30\0\1\u0279"+
    "\57\0\1\u027a\101\0\1\u027b\1\u027c\100\0\1\u027d\56\0"+
    "\1\u027e\30\0\1\u027f\70\0\1\u0266\71\0\1\u0274\101\0"+
    "\1\u0280\76\0\1\u026c\55\0\1\u0278\22\0\1\u0266\53\0"+
    "\2\u0281\12\0\1\u0281\16\0\3\u0281\24\0\2\u0281\1\0"+
    "\1\u0281\34\0\1\u0267\71\0\1\u027a\101\0\1\u0282\76\0"+
    "\1\u0270\55\0\1\u027e\22\0\1\u0267\53\0\2\u0283\12\0"+
    "\1\u0283\16\0\3\u0283\24\0\2\u0283\1\0\1\u0283\33\0"+
    "\1\u0274\54\0\2\u0281\12\0\1\u0281\6\0\1\u0266\7\0"+
    "\3\u0281\24\0\2\u0281\1\0\1\u0281\33\0\1\u027a\54\0"+
    "\2\u0283\12\0\1\u0283\6\0\1\u0267\7\0\3\u0283\24\0"+
    "\2\u0283\1\0\1\u0283\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32382];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\3\1\1\11\3\1\2\11\12\1\1\11"+
    "\2\1\2\11\6\1\1\11\1\1\1\11\1\1\5\11"+
    "\1\1\1\11\13\1\1\11\3\1\3\11\1\1\2\11"+
    "\1\1\1\11\5\1\2\11\3\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\0\5\1\1\0"+
    "\1\1\3\0\1\1\1\11\33\1\4\11\1\1\1\11"+
    "\3\1\1\0\1\1\1\0\11\11\23\1\5\11\5\0"+
    "\2\11\3\0\2\1\1\0\5\1\10\0\33\1\1\0"+
    "\30\1\11\0\1\11\1\0\1\11\5\1\14\0\7\1"+
    "\1\0\22\1\1\0\31\1\2\11\1\0\1\11\5\0"+
    "\1\1\1\0\4\1\4\0\6\1\1\0\46\1\6\0"+
    "\1\11\1\1\1\0\6\1\1\0\44\1\2\0\1\1"+
    "\2\0\6\1\1\11\35\1\2\0\34\1\2\0\22\1"+
    "\1\0\1\1\2\0\14\1\1\0\1\1\1\11\1\0"+
    "\10\1\1\0\7\1\1\0\6\1\1\0\6\1\1\0"+
    "\4\1\1\0\3\1\1\0\3\1\1\0\1\1\4\0"+
    "\1\1\2\0\1\1\30\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[643];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public _XQueryLexer() {
    this((java.io.Reader)null);
  }


  private Stack<Integer> stack = new Stack<Integer>();

  private void pushState(int state) {
    stack.push(yystate());
    yybegin(state);
  }

  private void popState() {
    if (stack.empty()) {
        yybegin(YYINITIAL);

    } else {
        int state = stack.pop();
        yybegin(state);
    }
  }


  _XQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XQueryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 86: 
          { yypushback(2); return XQueryTypes.NCNAME;
          }
        case 152: break;
        case 150: 
          { return XQueryTypes.K_GROUPING_SEPARATOR;
          }
        case 153: break;
        case 149: 
          { return XQueryTypes.K_DECIMAL_SEPARATOR;
          }
        case 154: break;
        case 136: 
          { return XQueryTypes.K_COLLATION;
          }
        case 155: break;
        case 91: 
          { return XQueryTypes.K_NODE;
          }
        case 156: break;
        case 90: 
          { return XQueryTypes.K_SOME;
          }
        case 157: break;
        case 63: 
          { return XQueryTypes.NODECOMP_LT;
          }
        case 158: break;
        case 67: 
          { return XQueryTypes.EQUAL_EQUAL;
          }
        case 159: break;
        case 60: 
          { return XQueryTypes.PRAGMA_END;
          }
        case 160: break;
        case 138: 
          { return XQueryTypes.K_MINUS_SIGN;
          }
        case 161: break;
        case 110: 
          { return XQueryTypes.K_XQUERY;
          }
        case 162: break;
        case 70: 
          { return XQueryTypes.PIPE_PIPE;
          }
        case 163: break;
        case 48: 
          { return XQueryTypes.LT;
          }
        case 164: break;
        case 62: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return XQueryTypes.LT_CHAR;
          }
        case 165: break;
        case 64: 
          { return XQueryTypes.LE_CHARS;
          }
        case 166: break;
        case 147: 
          { return XQueryTypes.K_COPY_NAMESPACES;
          }
        case 167: break;
        case 133: 
          { return XQueryTypes.K_UNORDERED;
          }
        case 168: break;
        case 41: 
          { return XQueryTypes.DIRCOMMENTCHAR;
          }
        case 169: break;
        case 31: 
          { pushState(APOS_STRING); return XQueryTypes.APOSTROPHE;
          }
        case 170: break;
        case 97: 
          { popState(); return XQueryTypes.URIQUALIFIEDNAME;
          }
        case 171: break;
        case 29: 
          { return XQueryTypes.NCNAME;
          }
        case 172: break;
        case 69: 
          { return XQueryTypes.NOT_EQUAL;
          }
        case 173: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 174: break;
        case 80: 
          { return XQueryTypes.DOUBLELITERAL;
          }
        case 175: break;
        case 23: 
          { return XQueryTypes.L_BRACKET;
          }
        case 176: break;
        case 74: 
          { pushState(EXPR_COMMENT); return XQueryBasicTypes.EXPR_COMMENT_START;
          }
        case 177: break;
        case 7: 
          { popState(); return XQueryTypes.R_C_BRACE;
          }
        case 178: break;
        case 68: 
          { pushState(QNAME);return XQueryTypes.SLASH_SLASH;
          }
        case 179: break;
        case 83: 
          { return XQueryTypes.K_MAP;
          }
        case 180: break;
        case 120: 
          { return XQueryTypes.K_VERSION;
          }
        case 181: break;
        case 58: 
          { return XQueryTypes.COLON_COLON;
          }
        case 182: break;
        case 52: 
          { return XQueryTypes.K_AT;
          }
        case 183: break;
        case 55: 
          { return XQueryTypes.K_OF;
          }
        case 184: break;
        case 22: 
          { return XQueryTypes.STAR_SIGN;
          }
        case 185: break;
        case 143: 
          { return XQueryTypes.K_NO_PRESERVE;
          }
        case 186: break;
        case 54: 
          { return XQueryTypes.K_OR;
          }
        case 187: break;
        case 73: 
          { return XQueryTypes.K_IF;
          }
        case 188: break;
        case 88: 
          { return XQueryTypes.K_ELSE;
          }
        case 189: break;
        case 99: 
          { return XQueryTypes.K_LEAST;
          }
        case 190: break;
        case 71: 
          { return XQueryTypes.NE;
          }
        case 191: break;
        case 139: 
          { return XQueryTypes.K_NO_INHERIT;
          }
        case 192: break;
        case 53: 
          { return XQueryTypes.K_AS;
          }
        case 193: break;
        case 130: 
          { pushState(QNAME); return XQueryTypes.K_VARIABLE;
          }
        case 194: break;
        case 34: 
          { popState(); return XQueryTypes.GT_CHAR;
          }
        case 195: break;
        case 116: 
          { return XQueryTypes.K_DECLARE;
          }
        case 196: break;
        case 61: 
          { return XQueryTypes.K_BY;
          }
        case 197: break;
        case 47: 
          { return XQueryTypes.LE;
          }
        case 198: break;
        case 79: 
          { return XQueryTypes.DBL_R_C_BRACE;
          }
        case 199: break;
        case 125: 
          { return XQueryTypes.K_ORDERING;
          }
        case 200: break;
        case 45: 
          { return XQueryTypes.STRINGLITERAL;
          }
        case 201: break;
        case 33: 
          { popState();pushState(ELEMENT_CONTENT); return XQueryTypes.GT_CHAR;
          }
        case 202: break;
        case 28: 
          { return XQueryBasicTypes.EXPR_COMMENT_CONTENT;
          }
        case 203: break;
        case 101: 
          { return XQueryTypes.K_ORDER;
          }
        case 204: break;
        case 128: 
          { return XQueryTypes.K_INSTANCE;
          }
        case 205: break;
        case 112: 
          { return XQueryTypes.K_IMPORT;
          }
        case 206: break;
        case 117: 
          { return XQueryTypes.K_DEFAULT;
          }
        case 207: break;
        case 93: 
          { return XQueryTypes.K_ITEM;
          }
        case 208: break;
        case 13: 
          { return XQueryTypes.HASH;
          }
        case 209: break;
        case 84: 
          { return XQueryTypes.K_FOR;
          }
        case 210: break;
        case 140: 
          { return XQueryTypes.K_DESCENDING;
          }
        case 211: break;
        case 121: 
          { return XQueryTypes.K_ENCODING;
          }
        case 212: break;
        case 109: 
          { return XQueryTypes.K_SWITCH;
          }
        case 213: break;
        case 126: 
          { return XQueryTypes.K_BASE_URI;
          }
        case 214: break;
        case 37: 
          { popState(); return XQueryTypes.QUOT;
          }
        case 215: break;
        case 113: 
          { return XQueryTypes.K_ELEMENT;
          }
        case 216: break;
        case 25: 
          { return XQueryTypes.COMA;
          }
        case 217: break;
        case 95: 
          { return XQueryTypes.PREDEFINEDENTITYREF;
          }
        case 218: break;
        case 10: 
          { return XQueryTypes.COLON;
          }
        case 219: break;
        case 146: 
          { return XQueryTypes.K_DECIMAL_FORMAT;
          }
        case 220: break;
        case 92: 
          { return XQueryTypes.K_CASE;
          }
        case 221: break;
        case 76: 
          { popState(); return XQueryTypes.CLOSE_TAG;
          }
        case 222: break;
        case 32: 
          { return XQueryTypes.S;
          }
        case 223: break;
        case 103: 
          { return XQueryTypes.K_DIGIT;
          }
        case 224: break;
        case 66: 
          { return XQueryTypes.GE_CHARS;
          }
        case 225: break;
        case 131: 
          { return XQueryTypes.K_ASCENDING;
          }
        case 226: break;
        case 11: 
          { return XQueryTypes.R_PAR;
          }
        case 227: break;
        case 38: 
          { popState(); return XQueryTypes.APOSTROPHE;
          }
        case 228: break;
        case 14: 
          { return TokenType.WHITE_SPACE;
          }
        case 229: break;
        case 15: 
          { pushState(START_TAG); return XQueryTypes.LT_CHAR;
          }
        case 230: break;
        case 4: 
          { pushState(QNAME);yypushback(yylength());return TokenType.WHITE_SPACE;
          }
        case 231: break;
        case 132: 
          { return XQueryTypes.K_PER_MILLE;
          }
        case 232: break;
        case 127: 
          { pushState(QNAME); return XQueryTypes.K_FUNCTION;
          }
        case 233: break;
        case 105: 
          { return XQueryTypes.K_EMPTY;
          }
        case 234: break;
        case 142: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { return XQueryTypes.K_EMPTY;
          }
        case 235: break;
        case 85: 
          { return XQueryTypes.K_NAN;
          }
        case 236: break;
        case 87: 
          { popState(); return XQueryTypes.DIR_COMMENT_END;
          }
        case 237: break;
        case 16: 
          { return XQueryTypes.GT_CHAR;
          }
        case 238: break;
        case 89: 
          { return XQueryTypes.K_THEN;
          }
        case 239: break;
        case 8: 
          { return XQueryTypes.SEMICOLON;
          }
        case 240: break;
        case 65: 
          { return XQueryTypes.NODECOMP_GT;
          }
        case 241: break;
        case 40: 
          { popState(); return XQueryTypes.NCNAME;
          }
        case 242: break;
        case 81: 
          { return XQueryTypes.K_LET;
          }
        case 243: break;
        case 27: 
          { return XQueryTypes.PIPE;
          }
        case 244: break;
        case 107: 
          { return XQueryTypes.K_OPTION;
          }
        case 245: break;
        case 145: 
          { return XQueryTypes.K_BOUNDARY_SPACE;
          }
        case 246: break;
        case 72: 
          { return XQueryTypes.K_IN;
          }
        case 247: break;
        case 51: 
          { return XQueryTypes.GT;
          }
        case 248: break;
        case 122: 
          { return XQueryTypes.K_GREATEST;
          }
        case 249: break;
        case 18: 
          { return XQueryTypes.EQUAL;
          }
        case 250: break;
        case 36: 
          { return XQueryTypes.CHAR;
          }
        case 251: break;
        case 98: 
          { return XQueryTypes.K_EVERY;
          }
        case 252: break;
        case 100: 
          { return XQueryTypes.K_GROUP;
          }
        case 253: break;
        case 78: 
          { return XQueryTypes.DBL_L_C_BRACE;
          }
        case 254: break;
        case 94: 
          { pushState(DIR_COMMENT); return XQueryTypes.DIR_COMMENT_BEGIN;
          }
        case 255: break;
        case 24: 
          { return XQueryTypes.R_BRACKET;
          }
        case 256: break;
        case 106: 
          { return XQueryTypes.K_MODULE;
          }
        case 257: break;
        case 137: 
          { return XQueryTypes.K_TYPESWITCH;
          }
        case 258: break;
        case 35: 
          { return XQueryTypes.ELEMENTCONTENTCHAR;
          }
        case 259: break;
        case 30: 
          { pushState(QUOT_STRING); return XQueryTypes.QUOT;
          }
        case 260: break;
        case 111: 
          { return XQueryTypes.K_RETURN;
          }
        case 261: break;
        case 123: 
          { pushState(ALLOWING);return XQueryTypes.K_ALLOWING;
          }
        case 262: break;
        case 108: 
          { return XQueryTypes.K_SCHEMA;
          }
        case 263: break;
        case 57: 
          { return XQueryTypes.PRAGMA_BEGIN;
          }
        case 264: break;
        case 134: 
          { return XQueryTypes.K_SATISFIES;
          }
        case 265: break;
        case 104: 
          { return XQueryTypes.K_WHERE;
          }
        case 266: break;
        case 43: 
          { return XQueryTypes.DECIMALLITERAL;
          }
        case 267: break;
        case 148: 
          { return XQueryTypes.K_PATTERN_SEPARATOR;
          }
        case 268: break;
        case 75: 
          { popState(); return XQueryBasicTypes.EXPR_COMMENT_END;
          }
        case 269: break;
        case 129: 
          { return XQueryTypes.K_INFINITY;
          }
        case 270: break;
        case 46: 
          { pushState(URIQUALIFIED); yypushback(2);
          }
        case 271: break;
        case 96: 
          { return XQueryTypes.CHARREF;
          }
        case 272: break;
        case 59: 
          { return XQueryTypes.OP_ASSIGN;
          }
        case 273: break;
        case 141: 
          { return XQueryTypes.K_ZERO_DIGIT;
          }
        case 274: break;
        case 26: 
          { return XQueryTypes.PERCENT;
          }
        case 275: break;
        case 50: 
          { return XQueryTypes.GE;
          }
        case 276: break;
        case 135: 
          { return XQueryTypes.K_NAMESPACE;
          }
        case 277: break;
        case 3: 
          { return XQueryTypes.INTEGERLITERAL;
          }
        case 278: break;
        case 2: 
          { return XQueryTypes.DOT;
          }
        case 279: break;
        case 20: 
          { pushState(QNAME);return XQueryTypes.SLASH;
          }
        case 280: break;
        case 44: 
          { return XQueryTypes.EQ;
          }
        case 281: break;
        case 77: 
          { popState(); pushState(END_TAG); return XQueryTypes.END_TAG;
          }
        case 282: break;
        case 19: 
          { pushState(QNAME);return XQueryTypes.AT_SIGN;
          }
        case 283: break;
        case 151: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 8;
          { return XQueryTypes.K_FUNCTION;
          }
        case 284: break;
        case 12: 
          { return XQueryTypes.OP_MINUS;
          }
        case 285: break;
        case 6: 
          { pushState(YYINITIAL); return XQueryTypes.L_C_BRACE;
          }
        case 286: break;
        case 144: 
          { return XQueryTypes.K_CONSTRUCTION;
          }
        case 287: break;
        case 42: 
          { return XQueryTypes.DOT_DOT;
          }
        case 288: break;
        case 9: 
          { return XQueryTypes.L_PAR;
          }
        case 289: break;
        case 82: 
          { return XQueryTypes.K_AND;
          }
        case 290: break;
        case 39: 
          { yypushback(yylength()); popState();
          }
        case 291: break;
        case 21: 
          { return XQueryTypes.QUESTIONMARK;
          }
        case 292: break;
        case 49: 
          { return XQueryTypes.K_TO;
          }
        case 293: break;
        case 115: 
          { return XQueryTypes.K_ORDERED;
          }
        case 294: break;
        case 102: 
          { return XQueryTypes.K_STRIP;
          }
        case 295: break;
        case 56: 
          { pushState(EXPR_COMMENT);return XQueryBasicTypes.EXPR_COMMENT_START;
          }
        case 296: break;
        case 17: 
          { pushState(QNAME);return XQueryTypes.DOLLAR_SIGN;
          }
        case 297: break;
        case 119: 
          { return XQueryTypes.K_INHERIT;
          }
        case 298: break;
        case 118: 
          { return XQueryTypes.K_CONTEXT;
          }
        case 299: break;
        case 124: 
          { return XQueryTypes.K_PRESERVE;
          }
        case 300: break;
        case 114: 
          { return XQueryTypes.K_PERCENT;
          }
        case 301: break;
        case 5: 
          { return XQueryTypes.OP_PLUS;
          }
        case 302: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
